        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:
        -:    7://test and fail counters
        -:    8:int failureCount = 0;
        -:    9:int testCount =0;
        -:   10:
        -:   11://replaces c assert
function assertTrue called 6 returned 100% blocks executed 80%
        -:   12:void assertTrue(int a, int b) {
        6:   13:    if (a == b) {
branch  0 taken 100%
branch  1 taken 0%
        6:   14:        printf("PASSED\n");
        6:   15:        testCount++;
        6:   16:    }
        -:   17:    else {
    #####:   18:        printf("FAILED\n");
    #####:   19:        failureCount++;
    #####:   20:        testCount++;
        -:   21:    }
        6:   22:}
        -:   23:
        -:   24://runs tests
function main called 1 returned 100% blocks executed 92%
        -:   25:int main () {
        -:   26:    
        -:   27:    //sets up game
        -:   28:    int i, b;
        1:   29:    int numPlayers = 2;
        1:   30:    int player = 0;
        -:   31:
        1:   32:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   33:               remodel, smithy, village, baron, great_hall};
        1:   34:    int seed = 2000;
        -:   35:    struct gameState state;
        -:   36:    int handCount;
        1:   37:    int bonus = 1;
        -:   38:
        -:   39:    int coppers[MAX_HAND];
        -:   40:    int silvers[MAX_HAND];
        -:   41:    int golds[MAX_HAND];
        -:   42:
        -:   43:    //fills hand with designated treasure
     1002:   44:    for (i = 0; i < MAX_HAND; i++) {
branch  0 taken 99%
branch  1 taken 1%
      500:   45:        coppers[i] = copper;
      500:   46:        silvers[i] = silver;
      500:   47:        golds[i] = gold;
      500:   48:    }
        -:   49:
        1:   50:    printf("Starting tests for updateCoins()...");
        -:   51:
        -:   52:    //tests how updateCoins handles each treasure as well as a different bonus and hand count
        6:   53:    for (handCount = 0; handCount <= 5; handCount = handCount + 5) {
branch  0 taken 67%
branch  1 taken 33%
        2:   54:        printf("\n\nTreasure cards: %d\n",handCount);
        2:   55:        printf("Bonus: %d\n", bonus);
        -:   56:
        2:   57:        memset(&state,23,sizeof(struct gameState));
        2:   58:        b = initializeGame(numPlayers, k, seed, &state);
        2:   59:        state.handCount[player] = handCount;
        -:   60:
        -:   61:        //fills hand with coppers
        2:   62:        memcpy(state.hand[player],coppers,sizeof(int)*handCount);
        2:   63:        updateCoins(player,&state,bonus);
        -:   64:
        2:   65:        printf("\nTEST: Coin Count - copper\n");
        2:   66:        printf("Actual: %d\n",state.coins);
        2:   67:        printf("Expected: %d\n",handCount*1+bonus);
        2:   68:        assertTrue(state.coins,handCount*1+bonus);
        -:   69:
        -:   70:        //fills hand with silvers
        2:   71:        memcpy(state.hand[player],silvers,sizeof(int)*handCount);
        2:   72:        updateCoins(player,&state,bonus);
        -:   73:
        2:   74:        printf("\nTEST: Coin Count - silver\n");
        2:   75:        printf("Actual: %d\n",state.coins);
        2:   76:        printf("Expected: %d\n",handCount*2+bonus);
        2:   77:        assertTrue(state.coins,handCount*2+bonus);
        -:   78:
        -:   79:        //fills hand with golds
        2:   80:        memcpy(state.hand[player],golds,sizeof(int)*handCount);
        2:   81:        updateCoins(player,&state,bonus);
        -:   82:
        2:   83:        printf("\nTEST: Coin Count - gold\n");
        2:   84:        printf("Actual: %d\n",state.coins);
        2:   85:        printf("Expected: %d\n",handCount*3+bonus);
        2:   86:        assertTrue(state.coins,handCount*3+bonus);
        -:   87:
        2:   88:        bonus = bonus + 2;
        2:   89:    }
        -:   90:
        1:   91:    if (failureCount) {
branch  0 taken 0%
branch  1 taken 100%
    #####:   92:        printf("\nTEST(S) FAILED\n");
    #####:   93:        printf("%d of %d tests failed!\n",failureCount,testCount);
    #####:   94:    }
        -:   95:    else {
        1:   96:        printf("\nTESTS SUCCESSFULLY COMPLETED\n\n");
        -:   97:    }
        -:   98:
        1:   99:    return 0;
        -:  100:}
