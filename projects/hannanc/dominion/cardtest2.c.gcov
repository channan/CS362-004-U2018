        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:30
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:
        -:    7://test and failure counters
        -:    8:int failureCount = 0;
        -:    9:int testCount = 0;
        -:   10:
        -:   11://replaces c assert so that we can run through all tests even if they fail
function assertTrue called 510 returned 100% blocks executed 100%
        -:   12:void assertTrue(int a, int b) {
      510:   13:    if (a == b) {
branch  0 taken 88%
branch  1 taken 12%
      450:   14:        printf("PASSED\n");
      450:   15:        testCount++;
      450:   16:    }
        -:   17:    else {
       60:   18:        printf("FAILED\n");
       60:   19:        failureCount++;
       60:   20:        testCount++;
        -:   21:    }
      510:   22:}
        -:   23:
        -:   24://starts tests
function main called 30 returned 100% blocks executed 88%
        -:   25:int main () {
        -:   26:    
        -:   27:    //sets up game
        -:   28:    int i;
       30:   29:    int numPlayers = 2;
       30:   30:    int player0 = 0;
       30:   31:    int player1 = 1;
        -:   32:
       30:   33:    int handpos = 0;
       30:   34:    int choice1 = 0, choice2 = 0, choice3 = 0;
       30:   35:    int bonus = 0;
        -:   36:
       30:   37:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   38:               remodel, smithy, village, baron, great_hall};
        -:   39:
       30:   40:    int seed = 2000;
        -:   41:    
        -:   42:    //inits structs for current state and original state for comparison
        -:   43:    struct gameState state, originalState;
        -:   44:
       30:   45:    printf("Starting tests for smithyEffect()...\n");
       30:   46:    memset(&state,23,sizeof(struct gameState));
       30:   47:    memset(&originalState,23,sizeof(struct gameState));
        -:   48:
        -:   49:    //starts game
       30:   50:    initializeGame(numPlayers, k, seed, &state);
        -:   51:
        -:   52:    //copies current state so we can make changes and compare
       30:   53:    memcpy(&originalState, &state, sizeof(struct gameState));
        -:   54:
        -:   55:    //calls function to test
       30:   56:    cardEffect(smithy, choice1, choice2, choice3, &state, handpos, &bonus);
        -:   57:
       30:   58:    printf("\nTEST: Player 0 gains 3 cards\n");
       30:   59:    printf("Actual: %d\n",state.handCount[player0]);
       30:   60:    printf("Expected: %d\n",originalState.handCount[player0]+2);
       30:   61:    assertTrue(state.handCount[player0],originalState.handCount[player0]+2);
        -:   62:
       30:   63:    printf("\nTEST: Player 0 gains 3 cards from his own pile\n");
       30:   64:    printf("Actual: %d\n",state.deckCount[player0]);
       30:   65:    printf("Expected: %d\n",originalState.deckCount[player0]-3);
       30:   66:    assertTrue(state.deckCount[player0],originalState.deckCount[player0]-3);
        -:   67:
       30:   68:    printf("\nTEST: No change to victory card piles\n");
        -:   69:    
       30:   70:    printf("Province Pile\n");
       30:   71:    printf("Actual: %d\n",state.supplyCount[province]);
       30:   72:    printf("Expected: %d\n",originalState.supplyCount[province]);
       30:   73:    assertTrue(state.supplyCount[province],originalState.supplyCount[province]);
        -:   74:    
       30:   75:    printf("\nDuchy Pile\n");
       30:   76:    printf("Actual: %d\n",state.supplyCount[duchy]);
       30:   77:    printf("Expected: %d\n",originalState.supplyCount[duchy]);
       30:   78:    assertTrue(state.supplyCount[duchy],originalState.supplyCount[duchy]);
        -:   79:    
       30:   80:    printf("\nEstate Pile\n");
       30:   81:    printf("Actual: %d\n",state.supplyCount[estate]);
       30:   82:    printf("Expected: %d\n",originalState.supplyCount[estate]);
       30:   83:    assertTrue(state.supplyCount[estate],originalState.supplyCount[estate]);
        -:   84:
       30:   85:    printf("\nTEST: No change to kingdom card piles\n");
      660:   86:    for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9%
      300:   87:        printf("checking card piles...\n");
      300:   88:        assertTrue(state.supplyCount[k[i]],originalState.supplyCount[k[i]]);
      300:   89:    }
        -:   90:
       30:   91:    printf("\nTEST: Player 1 was not affected\n");
        -:   92:    
       30:   93:    printf("Hand Count\n");
       30:   94:    printf("Actual: %d\n",state.handCount[player1]);
       30:   95:    printf("Expected: %d\n",originalState.handCount[player1]);
       30:   96:    assertTrue(state.handCount[player1],originalState.handCount[player1]);
        -:   97:    
       30:   98:    printf("\nDeck Count\n");
       30:   99:    printf("Actual: %d\n",state.deckCount[player1]);
       30:  100:    printf("Expected: %d\n",originalState.deckCount[player1]);
       30:  101:    assertTrue(state.deckCount[player1],originalState.deckCount[player1]);
        -:  102:
       30:  103:    if (failureCount) {
branch  0 taken 100%
branch  1 taken 0%
       30:  104:        printf("\nTEST(S) FAILED\n");
       30:  105:        printf("%d of %d tests failed!\n",failureCount,testCount);
       30:  106:    }
        -:  107:    else {
    #####:  108:        printf("\nTESTS SUCCESSFULLY COMPLETED\n\n");
        -:  109:    }
        -:  110:
       30:  111:    return 0;
        -:  112:}
