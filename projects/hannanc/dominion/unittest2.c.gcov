        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:28
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:
        -:    7://fails and tests counters
        -:    8:int failureCount = 0;
        -:    9:int testCount = 0;
        -:   10:
        -:   11://replaces c assert
function assertTrue called 84 returned 100% blocks executed 80%
        -:   12:void assertTrue(int a, int b) {
       84:   13:    if (a == b) {
branch  0 taken 100%
branch  1 taken 0%
       84:   14:        printf("PASSED\n");
       84:   15:        testCount++;
       84:   16:    }
        -:   17:    else {
    #####:   18:        printf("FAILED\n");
    #####:   19:        failureCount++;
    #####:   20:        testCount++;
        -:   21:    }
       84:   22:}
        -:   23:
        -:   24://starts tests
function main called 28 returned 100% blocks executed 80%
        -:   25:int main () {
        -:   26:    
        -:   27:    //sets up game
       28:   28:    int numPlayers = 2;
        -:   29:
       28:   30:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   31:               remodel, smithy, village, baron, great_hall};
       28:   32:    int seed = 2000;
        -:   33:    struct gameState state;
        -:   34:
       28:   35:    printf("Starting tests for isGameOver()...\n");
        -:   36:
       28:   37:    memset(&state,23,sizeof(struct gameState));
       28:   38:    initializeGame(numPlayers, k, seed, &state);
        -:   39:
       28:   40:    state.supplyCount[province] = 0;
        -:   41:
       28:   42:    printf("\nTEST: Province cards empty\n");
       28:   43:    printf("Actual: %d\n",isGameOver(&state));
       28:   44:    printf("Expected: %d\n",1);
       28:   45:    assertTrue(isGameOver(&state),1);
        -:   46:
       28:   47:    state.supplyCount[province] = 1;
        -:   48:
       28:   49:    state.supplyCount[0] = 0;
       28:   50:    state.supplyCount[1] = 0;
       28:   51:    state.supplyCount[2] = 0;
        -:   52:
       28:   53:    printf("\nTEST: Three supply piles empty\n");
       28:   54:    printf("Actual: %d\n",isGameOver(&state));
       28:   55:    printf("Expected: %d\n",1);
       28:   56:    assertTrue(isGameOver(&state),1);
        -:   57:
       28:   58:    state.supplyCount[0] = 1;
       28:   59:    state.supplyCount[1] = 1;
       28:   60:    state.supplyCount[2] = 1;
        -:   61:
       28:   62:    printf("\nTEST: Province cards not empty\n");
       28:   63:    printf("\nTEST: Three supply piles not empty\n");
       28:   64:    printf("Actual: %d\n",isGameOver(&state));
       28:   65:    printf("Expected: %d\n",0);
       28:   66:    assertTrue(isGameOver(&state),0);
        -:   67:
       28:   68:    if (failureCount) {
branch  0 taken 0%
branch  1 taken 100%
    #####:   69:        printf("\nTEST(S) FAILED\n");
    #####:   70:        printf("%d of %d tests failed!\n",failureCount,testCount);
    #####:   71:    }
        -:   72:    else {
       28:   73:        printf("\nTESTS SUCCESSFULLY COMPLETED\n\n");
        -:   74:    }
        -:   75:
       28:   76:    return 0;
        -:   77:}
