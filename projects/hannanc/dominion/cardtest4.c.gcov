        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:25
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:
        -:    7://fail and test counters
        -:    8:int failureCount = 0;
        -:    9:int testCount = 0;
        -:   10:
        -:   11://replaces c assert
function assertTrue called 554 returned 100% blocks executed 100%
        -:   12:void assertTrue(int a, int b) {
      554:   13:    if (a == b) {
branch  0 taken 94%
branch  1 taken 6%
      518:   14:        printf("PASSED\n");
      518:   15:        testCount++;
      518:   16:    }
        -:   17:    else {
       36:   18:        printf("FAILED\n");
       36:   19:        failureCount++;
       36:   20:        testCount++;
        -:   21:    }
      554:   22:}
        -:   23:
        -:   24://starts tests
function main called 25 returned 0% blocks executed 61%
        -:   25:int main () {
        -:   26:    
        -:   27:    //sets up game
        -:   28:    int i;
    #####:   29:    int numPlayers = 2;
    #####:   30:    int player0 = 0;
    #####:   31:    int player1 = 1;
        -:   32:
    #####:   33:    int handpos = 0;
    #####:   34:    int choice1 = copper, choice2 = silver, choice3 = 0;
    #####:   35:    int bonus = 0;
        -:   36:
    #####:   37:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   38:               remodel, smithy, village, baron, great_hall};
        -:   39:
    #####:   40:    int seed = 2000;
        -:   41:
    #####:   42:    int handCount = 5;
        -:   43:    
        -:   44:    int coppers[MAX_HAND];
        -:   45:    int silvers[MAX_HAND];
        -:   46:    int golds[MAX_HAND];
        -:   47:
        -:   48:    //fills hand with designated treasure
      525:   49:    for (i = 0; i < MAX_HAND; i++) {
branch  0 taken 91%
branch  1 taken 9%
      250:   50:        coppers[i] = copper;
      250:   51:        silvers[i] = silver;
      250:   52:        golds[i] = gold;
      250:   53:    }
        -:   54:
        -:   55:    //multiples structs for comparison
        -:   56:    struct gameState state, originalState;
        -:   57:
       10:   58:    printf("Starting tests for mineEffect()...\n");
       10:   59:    memset(&state,23,sizeof(struct gameState));
       10:   60:    memset(&originalState,23,sizeof(struct gameState));
        -:   61:
        -:   62:    //starts game
       10:   63:    initializeGame(numPlayers, k, seed, &state);
        -:   64:
        -:   65:    //copies state for comparison
       10:   66:    memcpy(&originalState, &state, sizeof(struct gameState));
        -:   67:
        -:   68:    //fills hand with coppers
       10:   69:    memcpy(state.hand[player0],coppers,sizeof(int)*handCount);
        -:   70:
        -:   71:    //calls function for testing
       10:   72:    cardEffect(mine, choice1, choice2, choice3, &state, handpos, &bonus);
        -:   73:
       10:   74:    printf("\nTEST: Player 0 hand count is unaffected\n");
       10:   75:    printf("Actual: %d\n",state.handCount[player0]);
       10:   76:    printf("Expected: %d\n",originalState.handCount[player0]);
       10:   77:    assertTrue(state.handCount[player0],originalState.handCount[player0]);
        -:   78:
       10:   79:    printf("\nTEST: Player 0 deck count is unaffected\n");
       10:   80:    printf("Actual: %d\n",state.deckCount[player0]);
       10:   81:    printf("Expected: %d\n",originalState.deckCount[player0]);
       10:   82:    assertTrue(state.deckCount[player0],originalState.deckCount[player0]);
        -:   83:
       10:   84:    printf("\nTEST: No change to victory card piles\n");
        -:   85:    
       10:   86:    printf("Province Pile\n");
       10:   87:    printf("Actual: %d\n",state.supplyCount[province]);
       10:   88:    printf("Expected: %d\n",originalState.supplyCount[province]);
       10:   89:    assertTrue(state.supplyCount[province],originalState.supplyCount[province]);
        -:   90:    
       10:   91:    printf("Duchy Pile\n");
       10:   92:    printf("Actual: %d\n",state.supplyCount[duchy]);
       10:   93:    printf("Expected: %d\n",originalState.supplyCount[duchy]);
       10:   94:    assertTrue(state.supplyCount[duchy],originalState.supplyCount[duchy]);
        -:   95:    
       10:   96:    printf("Estate Pile\n");
       10:   97:    printf("Actual: %d\n",state.supplyCount[estate]);
       10:   98:    printf("Expected: %d\n",originalState.supplyCount[estate]);
       10:   99:    assertTrue(state.supplyCount[estate],originalState.supplyCount[estate]);
        -:  100:
       10:  101:    printf("\nTEST: Player 1 was not affected\n");
        -:  102:    
       10:  103:    printf("Hand Count\n");
       10:  104:    printf("Actual: %d\n",state.handCount[player1]);
       10:  105:    printf("Expected: %d\n",originalState.handCount[player1]);
       10:  106:    assertTrue(state.handCount[player1],originalState.handCount[player1]);
        -:  107:    
       10:  108:    printf("Deck Count\n");
       10:  109:    printf("Actual: %d\n",state.deckCount[player1]);
       10:  110:    printf("Expected: %d\n",originalState.deckCount[player1]);
       10:  111:    assertTrue(state.deckCount[player1],originalState.deckCount[player1]);
        -:  112:
       10:  113:    printf("\nTEST: No change to kingdom card piles\n");
       60:  114:    for (i = 0; i < 10; i++) {
branch  0 taken 60%
branch  1 taken 40%
       15:  115:        printf("checking card piles...\n");
       15:  116:        assertTrue(state.supplyCount[k[i]],originalState.supplyCount[k[i]]);
       15:  117:    }
        -:  118:
    #####:  119:    if (failureCount) {
branch  0 never executed
branch  1 never executed
    #####:  120:        printf("\nTEST(S) FAILED\n");
    #####:  121:        printf("%d of %d tests failed!\n",failureCount,testCount);
    #####:  122:    }
        -:  123:    else {
    #####:  124:        printf("\nTESTS SUCCESSFULLY COMPLETED\n\n");
        -:  125:    }
        -:  126:
    #####:  127:    return 0;
        -:  128:}
