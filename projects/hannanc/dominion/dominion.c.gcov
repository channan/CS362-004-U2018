        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:267
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 24215 returned 100% blocks executed 100%
        -:    8:int compare(const void* a, const void* b) {
    24215:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 18%
branch  1 taken 82%
     4441:   10:    return 1;
    19774:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 42%
branch  1 taken 58%
     8294:   12:    return -1;
    11480:   13:  return 0;
    24215:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 298 returned 100% blocks executed 87%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      298:   44:  SelectStream(1);
      298:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      596:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      298:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     6556:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
    65560:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
    56620:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
    29800:   65:        }
     2980:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      298:   73:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   74:    {
      298:   75:      state->supplyCount[curse] = 10;
      298:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      298:   87:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   88:    {
      298:   89:      state->supplyCount[estate] = 8;
      298:   90:      state->supplyCount[duchy] = 8;
      298:   91:      state->supplyCount[province] = 8;
      298:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      298:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      298:  102:  state->supplyCount[silver] = 40;
      298:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    12516:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
    98340:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
    46190:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     5695:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 91%
branch  1 taken 9%
branch  2 taken 11%
branch  3 taken 89%
        -:  114:		{
      563:  115:		  if (numPlayers == 2){ 
branch  0 taken 100%
branch  1 taken 0%
      563:  116:		    state->supplyCount[i] = 8; 
      563:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
      563:  119:		}
        -:  120:	      else
        -:  121:		{
     2417:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     2980:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    43210:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
    43210:  130:	}
        -:  131:
     5960:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     1788:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  139:    {
      596:  140:      state->deckCount[i] = 0;
     4768:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
     1788:  143:	  state->deck[i][j] = estate;
     1788:  144:	  state->deckCount[i]++;
     1788:  145:	}
     9536:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
     4172:  148:	  state->deck[i][j] = copper;
     4172:  149:	  state->deckCount[i]++;		
     4172:  150:	}
      596:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     1788:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  155:    {
      596:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
      596:  160:    }
        -:  161:
        -:  162:  //draw player hands
     1788:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      596:  166:      state->handCount[i] = 0;
      596:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
      596:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    16688:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
     8046:  178:      state->embargoTokens[i] = 0;
     8046:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      298:  182:  state->outpostPlayed = 0;
      298:  183:  state->phase = 0;
      298:  184:  state->numActions = 1;
      298:  185:  state->numBuys = 1;
      298:  186:  state->playedCardCount = 0;
      298:  187:  state->whoseTurn = 0;
      298:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     3576:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
     1490:  193:    drawCard(state->whoseTurn, state);
     1490:  194:  }
        -:  195:
      298:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      298:  198:  return 0;
      298:  199:}
        -:  200:
function shuffle called 1171 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1171:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1171:  209:  if (state->deckCount[player] < 1)
branch  0 taken 6%
branch  1 taken 94%
       72:  210:    return -1;
     1099:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    29130:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 92%
branch  1 taken 8%
    13466:  215:    card = floor(Random() * state->deckCount[player]);
    13466:  216:    newDeck[newDeckPos] = state->deck[player][card];
    13466:  217:    newDeckPos++;
   119266:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 77%
branch  1 taken 23%
    46167:  219:      state->deck[player][i] = state->deck[player][i+1];
    46167:  220:    }
    13466:  221:    state->deckCount[player]--;
        -:  222:  }
    29130:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 92%
branch  1 taken 8%
    13466:  224:    state->deck[player][i] = newDeck[i];
    13466:  225:    state->deckCount[player]++;
    13466:  226:  }
        -:  227:
     1099:  228:  return 0;
     1171:  229:}
        -:  230:
function playCard called 1466 returned 100% blocks executed 83%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
     1466:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
     1466:  237:  if (state->phase != 0)
branch  0 taken 0%
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
     1466:  243:  if ( state->numActions < 1 )
branch  0 taken 83%
branch  1 taken 17%
        -:  244:    {
     1217:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
      249:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
      494:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 98%
branch  1 taken 2%
branch  2 taken 0%
branch  3 taken 100%
        -:  253:    {
        4:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
      245:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
      245:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
      245:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
      245:  269:  return 0;
     1466:  270:}
        -:  271:
function buyCard called 1139 returned 100% blocks executed 75%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
     1139:  280:  who = state->whoseTurn;
        -:  281:
     1139:  282:  if (state->numBuys < 1){
branch  0 taken 0%
branch  1 taken 100%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
     1139:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 taken 0%
branch  1 taken 100%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
     1139:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 taken 0%
branch  1 taken 100%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
     1139:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
     1139:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
     1139:  299:    state->coins = (state->coins) - (getCost(supplyPos));
     1139:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
     1139:  308:  return 0;
     1139:  309:}
        -:  310:
function numHandCards called 8955 returned 100% blocks executed 100%
        -:  311:int numHandCards(struct gameState *state) {
     8955:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 18023 returned 100% blocks executed 100%
        -:  315:int handCard(int handPos, struct gameState *state) {
    18023:  316:  int currentPlayer = whoseTurn(state);
    18023:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 2442 returned 100% blocks executed 100%
        -:  320:int supplyCount(int card, struct gameState *state) {
     2442:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 29657 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
    29657:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 1160 returned 100% blocks executed 100%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
     1160:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    14970:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 85%
branch  1 taken 15%
     6325:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
     6325:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
     6325:  359:  }
     1160:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
     1160:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 51%
branch  1 taken 49%
      588:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
      588:  365:  }
        -:  366:  else{
      572:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
     1160:  370:  state->outpostPlayed = 0;
     1160:  371:  state->phase = 0;
     1160:  372:  state->numActions = 1;
     1160:  373:  state->coins = 0;
     1160:  374:  state->numBuys = 1;
     1160:  375:  state->playedCardCount = 0;
     1160:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    13920:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17%
     5800:  381:    drawCard(state->whoseTurn, state);//Draw a card
     5800:  382:  }
        -:  383:
        -:  384:  //Update money
     1160:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
     1160:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 1318 returned 100% blocks executed 100%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
     1318:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 6%
branch  1 taken 94%
        -:  396:    {
       74:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
     1244:  401:  j = 0;
    64688:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  403:    {
    31100:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 1%
branch  1 taken 99%
        -:  405:	{
      126:  406:	  j++;
      126:  407:	}
    31100:  408:    }
     1244:  409:  if ( j >= 3)
branch  0 taken 3%
branch  1 taken 97%
        -:  410:    {
       42:  411:      return 1;
        -:  412:    }
        -:  413:
     1202:  414:  return 0;
     1318:  415:}
        -:  416:
function scoreFor called 64 returned 100% blocks executed 78%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
       64:  420:  int score = 0;
        -:  421:  //score from hand
      448:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29%
        -:  423:    {
      160:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0%
branch  1 taken 100%
      180:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 13%
branch  1 taken 88%
      160:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0%
branch  1 taken 100%
      177:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 11%
branch  1 taken 89%
      160:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0%
branch  1 taken 100%
      160:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0%
branch  1 taken 100%
      160:  430:    }
        -:  431:
        -:  432:  //score from discard
     1398:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:  434:    {
      635:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 0%
branch  1 taken 100%
      702:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 11%
branch  1 taken 89%
      635:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 0%
branch  1 taken 100%
      752:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 18%
branch  1 taken 82%
      635:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0%
branch  1 taken 100%
      635:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0%
branch  1 taken 100%
      635:  441:    }
        -:  442:
        -:  443:  //score from deck
     1398:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:  445:    {
      670:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 6%
branch  1 taken 94%
      691:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 9%
branch  1 taken 91%
      635:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0%
branch  1 taken 100%
      719:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 13%
branch  1 taken 87%
      635:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0%
branch  1 taken 100%
      635:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0%
branch  1 taken 100%
      635:  452:    }
        -:  453:
       64:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 8310 returned 100% blocks executed 91%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     8310:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 5%
branch  1 taken 95%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    14786:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 94%
branch  1 taken 6%
     6946:  534:      state->deck[player][i] = state->discard[player][i];
     6946:  535:      state->discard[player][i] = -1;
     6946:  536:    }
        -:  537:
      447:  538:    state->deckCount[player] = state->discardCount[player];
      447:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      447:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      447:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      447:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      447:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      447:  559:    if (deckCounter == 0)
branch  0 taken 0%
branch  1 taken 100%
    #####:  560:      return -1;
        -:  561:
      447:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      447:  563:    state->deckCount[player]--;
      447:  564:    state->handCount[player]++;//Increment hand count
      447:  565:  }
        -:  566:
        -:  567:  else{
     7863:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     7863:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     7863:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     7863:  576:    state->deckCount[player]--;
     7863:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     8310:  580:  return 0;
     8310:  581:}
        -:  582:
function getCost called 2310 returned 100% blocks executed 32%
        -:  583:int getCost(int cardNumber)
        -:  584:{
     2310:  585:  switch( cardNumber ) 
branch  0 taken 1%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 22%
branch  4 taken 1%
branch  5 taken 39%
branch  6 taken 27%
branch  7 taken 6%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 6%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
       10:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
      512:  594:      return 8;
        -:  595:    case copper:
       16:  596:      return 0;
        -:  597:    case silver:
      890:  598:      return 3;
        -:  599:    case gold:
      626:  600:      return 6;
        -:  601:    case adventurer:
      128:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
      128:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
     2310:  644:}
        -:  645:
        -:  646:
function adventurerEffect called 214 returned 100% blocks executed 100%
        -:  647:void adventurerEffect(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[], int z)
        -:  648:{
     1662:  649:  while(drawntreasure<=2){
branch  0 taken 74%
branch  1 taken 26%
      617:  650:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 5%
branch  1 taken 95%
       30:  651:	  shuffle(currentPlayer, state);
       30:  652:	}
      617:  653:	drawCard(currentPlayer, state);
      617:  654:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     1080:  655:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 51%
branch  1 taken 49%
branch  2 taken 47%
branch  3 taken 53%
branch  4 taken 21%
branch  5 taken 79%
      500:  656:	  drawntreasure++;
        -:  657:	else{
      117:  658:	  temphand[z]=cardDrawn;
      117:  659:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      117:  660:	  z++;
        -:  661:	}
        -:  662:      }
      662:  663:      while(z-1>=0){
branch  0 taken 35%
branch  1 taken 65%
      117:  664:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
      117:  665:	z=z-1;
        -:  666:      }
      214:  667:}
        -:  668:
function smithyEffect called 94 returned 100% blocks executed 100%
        -:  669:void smithyEffect(struct gameState *state, int currentPlayer, int handPos)
        -:  670:{
        -:  671:  //+3 Cards
      684:  672:      for (int i = 1; i < 3; i++)
branch  0 taken 73%
branch  1 taken 27%
        -:  673:	{
      248:  674:	  drawCard(currentPlayer, state);
      248:  675:	}
        -:  676:			
        -:  677:      //discard card from hand
       94:  678:      discardCard(handPos, currentPlayer, state, 0);
       94:  679:}
        -:  680:
function councilRoomEffect called 28 returned 100% blocks executed 100%
        -:  681:void councilRoomEffect(struct gameState *state, int currentPlayer, int handPos)
        -:  682:{
        -:  683:  //+4 Cards
      280:  684:      for (int i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  685:	{
      112:  686:	  drawCard(currentPlayer, state);
      112:  687:	}
        -:  688:			
        -:  689:      //+1 Buy
       28:  690:      state->numBuys++;
        -:  691:			
        -:  692:      //Each other player draws a card
      168:  693:      for (int i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  694:	{
       56:  695:	  if ( i == currentPlayer )
branch  0 taken 50%
branch  1 taken 50%
        -:  696:	    {
       28:  697:	      drawCard(i, state);
       28:  698:	    }
       56:  699:	}
        -:  700:			
        -:  701:      //put played card in played card pile
       28:  702:      discardCard(handPos, currentPlayer, state, 0);
       28:  703:}
        -:  704:
function feastEffect called 0 returned 0% blocks executed 0%
        -:  705:void feastEffect(struct gameState *state, int currentPlayer, int temphand[], int choice1, int x)
        -:  706:{
        -:  707:  //gain card with cost up to 5
        -:  708:      //Backup hand
    #####:  709:      for (int i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  710:	      temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  711:	      state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  712:      }
        -:  713:      //Backup hand
        -:  714:
        -:  715:      //Update Coins for Buy
    #####:  716:      updateCoins(currentPlayer, state, 5);
    #####:  717:      x = 1;//Condition to loop on
    #####:  718:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  719:	      if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  720:	        if (DEBUG)
        -:  721:	          printf("None of that card left, sorry!\n");
        -:  722:
        -:  723:	        if (DEBUG){
        -:  724:	          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  725:	        }
    #####:  726:	      }
    #####:  727:	      else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  728:	        printf("That card is too expensive!\n");
        -:  729:
        -:  730:	        if (DEBUG){
        -:  731:	          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  732:	        }
    #####:  733:	      }
        -:  734:	      else{
        -:  735:
        -:  736:	        if (DEBUG){
        -:  737:	          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  738:	        }
        -:  739:
    #####:  740:	        gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  741:	        x = 0;//No more buying cards
        -:  742:
        -:  743:	        if (DEBUG){
        -:  744:	          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  745:	        }
        -:  746:
        -:  747:	      }
        -:  748:      }     
        -:  749:
        -:  750:      //Reset Hand
    #####:  751:      for (int i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  752:	      state->hand[currentPlayer][i] = temphand[i];
    #####:  753:	      temphand[i] = -1;
    #####:  754:      }
    #####:  755:}
        -:  756:
function mineEffect called 16 returned 100% blocks executed 87%
        -:  757:int mineEffect(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos, int j)
        -:  758:{
       16:  759:  int result = 0;
       16:  760:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  761:
       32:  762:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  763:	    {
    #####:  764:        result = -1;
        -:  765:	      //return -1;
    #####:  766:	    }
        -:  767:		
       32:  768:      if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  769:	    {
    #####:  770:        result = -1;
        -:  771:	      //return -1;
    #####:  772:	    }
        -:  773:
       16:  774:      if ( (getCost(state->hand[currentPlayer][choice1]) + 4) > getCost(choice2) )
branch  0 taken 100%
branch  1 taken 0%
        -:  775:	    {
       16:  776:        result = -1;
        -:  777:	      //return -1;
       16:  778:	    }
        -:  779:
       16:  780:      gainCard(choice2, state, 2, currentPlayer);
        -:  781:
        -:  782:      //discard card from hand
       16:  783:      discardCard(handPos, currentPlayer, state, 0);
        -:  784:
        -:  785:      //discard trashed card
       64:  786:      for (int i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0%
        -:  787:	    {
       32:  788:	      if (state->hand[currentPlayer][i] == j)
branch  0 taken 50%
branch  1 taken 50%
        -:  789:	      {
       16:  790:	        discardCard(i, currentPlayer, state, 0);			
       16:  791:	        break;
        -:  792:	      }
       16:  793:	    }
        -:  794:			
       16:  795:      return result;
        -:  796:}
        -:  797:
function cardEffect called 21491613818 returned 0% blocks executed 13%
        -:  798:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  799:{
        -:  800:  int i;
14397326483292946566:  801:  int j = 0;
        -:  802:  int k;
14397326483292946566:  803:  int x = 0;
        -:  804:  int index;
        -:  805:  int result;
14397326483292946566:  806:  int currentPlayer = whoseTurn(state);
14397326483292946566:  807:  int nextPlayer = currentPlayer + 1;
        -:  808:
14397326483292946566:  809:  int tributeRevealedCards[2] = {-1, -1};
        -:  810:  int temphand[MAX_HAND];// moved above the if statement
14397326483292946566:  811:  int drawntreasure=0;
14397326483292946566:  812:  int cardDrawn=0;
14397326483292946566:  813:  int z = 0;// this is the counter for the temp hand
14397326483292946566:  814:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 1%
branch  1 taken 1%
  6582881:  815:    nextPlayer = 0;
  6582881:  816:  }
        -:  817:  
        -:  818:	
        -:  819:  //uses switch to select card and perform actions
3352292577943071129:  820:  switch( card ) 
branch  0 taken 1%
branch  1 taken 1%
branch  2 taken 1%
branch  3 taken 2%
branch  4 taken 1%
branch  5 taken 1%
branch  6 taken 1%
branch  7 taken 2%
branch  8 taken 1%
branch  9 taken 1%
branch 10 taken 1%
branch 11 taken 0%
branch 12 taken 1%
branch 13 taken 4%
branch 14 taken 2%
branch 15 taken 1%
branch 16 taken 0%
branch 17 taken 1%
branch 18 taken 3%
branch 19 taken 1%
branch 20 taken 1%
        -:  821:    {
        -:  822:    case adventurer:
474366694534:  823:      adventurerEffect(drawntreasure, state, currentPlayer, cardDrawn, temphand, z);
474366694534:  824:      return 0;
        -:  825:			
        -:  826:    case council_room:
72057594037927964:  827:      councilRoomEffect(state, currentPlayer, handPos);
72057594037927964:  828:      return 0;
        -:  829:			
        -:  830:    case feast:
68719476743:  831:      feastEffect(state, currentPlayer, temphand, choice1,x);
68719476743:  832:      return 0;
        -:  833:			
        -:  834:    case gardens:
17424526879:  835:      return -1;
        -:  836:			
        -:  837:    case mine:
7738139929303872886:  838:      result = mineEffect(state, currentPlayer, choice1, choice2, handPos, j);
7738139929303872886:  839:      return result;
        -:  840:			
        -:  841:    case remodel:
72058094107324227:  842:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  843:
72058094107324227:  844:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 taken 1%
branch  1 taken 99%
        -:  845:	{
73014444037:  846:	  return -1;
        -:  847:	}
        -:  848:
9172086132:  849:      gainCard(choice2, state, 0, currentPlayer);
        -:  850:
        -:  851:      //discard card from hand
9172086132:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:
        -:  854:      //discard trashed card
103145724687375321:  855:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 30%
branch  1 taken 70%
        -:  856:	{
93224767193:  857:	  if (state->hand[currentPlayer][i] == j)
branch  0 taken 83%
branch  1 taken 17%
        -:  858:	    {
8525144140093551465:  859:	      discardCard(i, currentPlayer, state, 0);			
8525144140093551465:  860:	      break;
        -:  861:	    }
    29285:  862:	}
        -:  863:
        -:  864:
6217793866309828627:  865:      return 0;
        -:  866:		
        -:  867:    case smithy:
8245918788311056417:  868:      smithyEffect(state, currentPlayer, handPos);
8245918788311056417:  869:      return 0;
        -:  870:		
        -:  871:    case village:
        -:  872:      //+1 Card
1919895156:  873:      drawCard(currentPlayer, state);
        -:  874:			
        -:  875:      //+2 Actions
1919895156:  876:      state->numActions = state->numActions + 2;
        -:  877:			
        -:  878:      //discard played card from hand
1919895156:  879:      discardCard(handPos, currentPlayer, state, 0);
1919895156:  880:      return 0;
        -:  881:		
        -:  882:    case baron:
72057679937273862:  883:      state->numBuys++;//Increase buys by 1!
72057679937273862:  884:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 99%
branch  1 taken 1%
16919086439:  885:	int p = 0;//Iterator for hand!
16919086439:  886:	int card_not_discarded = 1;//Flag for discard set!
7308900660905877056:  887:	while(card_not_discarded){
branch  0 taken 2%
branch  1 taken 1%
14700501649139433493:  888:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 taken 1%
branch  1 taken 1%
7166187310294237187:  889:	    state->coins += 4;//Add 4 coins to the amount of coins
7166187310294237187:  890:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
7166187310294237187:  891:	    state->discardCount[currentPlayer]++;
7194460570033353316:  892:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 taken 100%
branch  1 taken 0%
    #####:  893:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  894:	    }
    #####:  895:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  896:	    state->handCount[currentPlayer]--;
    #####:  897:	    card_not_discarded = 0;//Exit the loop
    #####:  898:	  }
    #####:  899:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  900:	    if(DEBUG) {
        -:  901:	      printf("No estate cards in your hand, invalid choice\n");
        -:  902:	      printf("Must gain an estate if there are any\n");
        -:  903:	    }
    #####:  904:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  905:	      gainCard(estate, state, 0, currentPlayer);
    #####:  906:	      state->supplyCount[estate]--;//Decrement estates
    #####:  907:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  908:		isGameOver(state);
    #####:  909:	      }
    #####:  910:	    }
    #####:  911:	    card_not_discarded = 0;//Exit the loop
    #####:  912:	  }
        -:  913:			    
        -:  914:	  else{
    #####:  915:	    p++;//Next card
        -:  916:	  }
        -:  917:	}
    #####:  918:      }
        -:  919:			    
        -:  920:      else{
    #####:  921:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  922:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  923:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  924:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  925:	    isGameOver(state);
    #####:  926:	  }
    #####:  927:	}
        -:  928:      }
        -:  929:	    
        -:  930:      
    #####:  931:      return 0;
        -:  932:		
        -:  933:    case great_hall:
        -:  934:      //+1 Card
    #####:  935:      drawCard(currentPlayer, state);
        -:  936:			
        -:  937:      //+1 Actions
    #####:  938:      state->numActions++;
        -:  939:			
        -:  940:      //discard card from hand
    #####:  941:      discardCard(handPos, currentPlayer, state, 0);
    #####:  942:      return 0;
        -:  943:		
        -:  944:    case minion:
        -:  945:      //+1 action
    #####:  946:      state->numActions++;
        -:  947:			
        -:  948:      //discard card from hand
    #####:  949:      discardCard(handPos, currentPlayer, state, 0);
        -:  950:			
    #####:  951:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  952:	{
    #####:  953:	  state->coins = state->coins + 2;
    #####:  954:	}
        -:  955:			
    #####:  956:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  957:	{
        -:  958:	  //discard hand
    #####:  959:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  960:	    {
    #####:  961:	      discardCard(handPos, currentPlayer, state, 0);
        -:  962:	    }
        -:  963:				
        -:  964:	  //draw 4
    #####:  965:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  966:	    {
    #####:  967:	      drawCard(currentPlayer, state);
    #####:  968:	    }
        -:  969:				
        -:  970:	  //other players discard hand and redraw if hand size > 4
    #####:  971:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  972:	    {
    #####:  973:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  974:		{
    #####:  975:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  976:		    {
        -:  977:		      //discard hand
    #####:  978:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  979:			{
    #####:  980:			  discardCard(handPos, i, state, 0);
        -:  981:			}
        -:  982:							
        -:  983:		      //draw 4
    #####:  984:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  985:			{
    #####:  986:			  drawCard(i, state);
    #####:  987:			}
    #####:  988:		    }
    #####:  989:		}
    #####:  990:	    }
        -:  991:				
    #####:  992:	}
    #####:  993:      return 0;
        -:  994:		
        -:  995:    case steward:
    #####:  996:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  997:	{
        -:  998:	  //+2 cards
    #####:  999:	  drawCard(currentPlayer, state);
    #####: 1000:	  drawCard(currentPlayer, state);
    #####: 1001:	}
    #####: 1002:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1003:	{
        -: 1004:	  //+2 coins
    #####: 1005:	  state->coins = state->coins + 2;
    #####: 1006:	}
        -: 1007:      else
        -: 1008:	{
        -: 1009:	  //trash 2 cards in hand
    #####: 1010:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1011:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1012:	}
        -: 1013:			
        -: 1014:      //discard card from hand
    #####: 1015:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1016:      return 0;
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
    #####: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
    #####: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
    #####: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
    #####: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
    #####: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1063:	  state->coins += 2;
    #####: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
    #####: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
    #####: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1093:	    {
    #####: 1094:	      j++;
    #####: 1095:	    }
    #####: 1096:	}
    #####: 1097:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1114:	    }
    #####: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
    #####: 1130:	    }
    #####: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
    #####: 1158:		}
        -: 1159:					
    #####: 1160:	    }
        -: 1161:				
    #####: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
    #####: 1197:      state->numBuys++;
        -: 1198:			
    #####: 1199:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1213:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1217:	}
    #####: 1218:      }
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
    #####: 1231:	}
    #####: 1232:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
      367: 1253:}
        -: 1254:
function discardCard called 169 returned 100% blocks executed 80%
        -: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
      169: 1259:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1260:    {
        -: 1261:      //add card to played pile
      169: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      169: 1263:      state->playedCardCount++;
      169: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
      169: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
      169: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
    #####: 1273:      state->handCount[currentPlayer]--;
    #####: 1274:    }
      169: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
    #####: 1278:      state->handCount[currentPlayer]--;
    #####: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
      169: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
      169: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
      169: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
      169: 1290:  return 0;
        -: 1291:}
        -: 1292:
function gainCard called 1303 returned 100% blocks executed 100%
        -: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
     1303: 1298:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 3%
branch  1 taken 97%
        -: 1299:    {
       40: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
     1263: 1308:  if (toFlag == 1)
branch  0 taken 2%
branch  1 taken 98%
        -: 1309:    {
       27: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       27: 1311:      state->deckCount[player]++;
       27: 1312:    }
     1236: 1313:  else if (toFlag == 2)
branch  0 taken 3%
branch  1 taken 97%
        -: 1314:    {
       43: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       43: 1316:      state->handCount[player]++;
       43: 1317:    }
        -: 1318:  else
        -: 1319:    {
     1193: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     1193: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
     1263: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
     1263: 1327:  return 0;
     1303: 1328:}
        -: 1329:
function updateCoins called 1883 returned 100% blocks executed 100%
        -: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
     1883: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
    22746: 1338:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1339:    {
     9490: 1340:      if (state->hand[player][i] == copper)
branch  0 taken 47%
branch  1 taken 53%
        -: 1341:	{
     4507: 1342:	  state->coins += 1;
     4507: 1343:	}
     4983: 1344:      else if (state->hand[player][i] == silver)
branch  0 taken 37%
branch  1 taken 63%
        -: 1345:	{
     1845: 1346:	  state->coins += 2;
     1845: 1347:	}
     3138: 1348:      else if (state->hand[player][i] == gold)
branch  0 taken 20%
branch  1 taken 80%
        -: 1349:	{
      615: 1350:	  state->coins += 3;
      615: 1351:	}	
     9490: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
     1883: 1355:  state->coins += bonus;
        -: 1356:
     1883: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
