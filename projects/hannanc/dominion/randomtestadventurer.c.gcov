        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:#include <stdio.h>
        -:    8:#include <time.h>
        -:    9:#include <math.h>
        -:   10:
        -:   11://fail counters
        -:   12:int cardEffectFails = 0;
        -:   13:int shuffleFails = 0;
        -:   14:int drawCardFails = 0;
        -:   15:int deckHandCountFails = 0;
        -:   16:int treasureCountFails = 0;
        -:   17:
        -:   18:void checkAdventurerEffect(int p, struct gameState *post);
        -:   19:
function main called 1 returned 100% blocks executed 90%
        -:   20:int main ()
        -:   21:{
        1:   22:    printf("RANDOM TEST - adventurerEffect()\n");
        1:   23:    int iterations = 10000;
        1:   24:    int treasures[] = {copper,silver,gold};
        -:   25:    int numTreasures;
        -:   26:    int i, n, player;
        -:   27:    struct gameState G;
        -:   28:
        1:   29:    int min = 3;
        1:   30:    srand(time(NULL));
        -:   31:
        -:   32:    //randomly inits the gamestate, this is from the lecture notes
    20002:   33:    for (n = 0; n < iterations; n++)
branch  0 taken 99%
branch  1 taken 1%
        -:   34:    {
526020000:   35:        for (i = 0; i < sizeof(struct gameState); i++)
branch  0 taken 99%
branch  1 taken 1%
        -:   36:        {
263000000:   37:            ((char*)&G)[i] = floor(Random() * 256);
263000000:   38:        }
        -:   39:
        -:   40:        //randomly selects game variables
    10000:   41:        player = floor(Random() * MAX_PLAYERS);
    10000:   42:        G.deckCount[player] = floor(Random() * ((MAX_DECK - min) + 1) + min);
    10000:   43:        numTreasures = floor(Random() * ((G.deckCount[player] - min) + 1) + min);
        -:   44:
        -:   45:        //puts a least 3 treasure cards in the deck to be drawn
  2542320:   46:        for (i = 0; i < numTreasures; i++)
branch  0 taken 99%
branch  1 taken 1%
        -:   47:        {
  1261160:   48:            G.deck[player][i] = treasures[rand() % 3];
  1261160:   49:        }
        -:   50:
    10000:   51:        G.discardCount[player] = 0;
    10000:   52:        G.handCount[player] = floor(Random() * ((MAX_HAND - min) + 1) + min);
    10000:   53:        G.whoseTurn = player;
        -:   54:
        -:   55:        //calls the test function
    10000:   56:        checkAdventurerEffect(player, &G);
    10000:   57:    }
        -:   58:
        -:   59:    //tallies the total number of fails
        1:   60:    int totalFails = cardEffectFails + drawCardFails + shuffleFails + deckHandCountFails + treasureCountFails;
        -:   61:
        -:   62:    //prints the results
        1:   63:    if (iterations - totalFails <= 0)
branch  0 taken 100%
branch  1 taken 0%
        -:   64:    {
        1:   65:        printf("\nRESULTS\n");
        1:   66:        printf("PASSED: %d\n",0);
        1:   67:        printf("FAILED: %d\n",iterations);
        1:   68:    }
        -:   69:    else
        -:   70:    {
    #####:   71:        printf("\nRESULTS\n");
    #####:   72:        printf("PASSED: %d\n",iterations - totalFails);
    #####:   73:        printf("FAILED: %d\n",totalFails);
        -:   74:    }
        -:   75:
        1:   76:    if (totalFails == 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####:   77:        printf ("RANDOM TEST PASSED\n\n");
    #####:   78:    }
        -:   79:    else
        -:   80:    {
        1:   81:        printf ("\nRANDOM TEST FAILED\n");
        1:   82:        printf("\nREPORT\n");
        1:   83:        printf("shuffle() failed: %d\n",shuffleFails);
        1:   84:        printf("drawCard() failed: %d\n",drawCardFails);
        1:   85:        printf("cardEffect() failed: %d\n",cardEffectFails);
        1:   86:        printf("Treasure Count mismatch: %d\n",treasureCountFails);
        1:   87:        printf("Hand/Deck Count mismatch: %d\n\n",deckHandCountFails);
        -:   88:
        -:   89:    }
        -:   90:
        -:   91:    //coverage is to be displayed next in the .out so the title is placed here
        1:   92:    printf ("COVERAGE\n");
        1:   93:    return 0;
        -:   94:}
        -:   95:
function checkAdventurerEffect called 10000 returned 100% blocks executed 80%
        -:   96:void checkAdventurerEffect(int p, struct gameState *post)
        -:   97:{
    10000:   98:    int PostTreasureCount = 0;
    10000:   99:    int PreTreasureCount = 0;
        -:  100:    int temphand[MAX_HAND];
    10000:  101:    int drawntreasure = 0;
        -:  102:
        -:  103:    //inits previous gamestate variable and other game variables
        -:  104:    struct gameState pre;
        -:  105:    int cardDrawn, card;
    10000:  106:    int bonus = 0;
        -:  107:    int r,s,t,i;
    10000:  108:    int z = 0;
        -:  109:
        -:  110:    //copies the previous variable into a post state gamestate variable for comparison
    10000:  111:    memcpy(&pre,post,sizeof(struct gameState));
        -:  112:
        -:  113:    //calls the adventurerEffect function
    10000:  114:    r = cardEffect(adventurer,0,0,0,post,0,&bonus);
        -:  115:
        -:  116:    //checks if cardEffect failed
    10000:  117:    if(r)
branch  0 taken 0%
branch  1 taken 100%
        -:  118:    {
    #####:  119:        cardEffectFails++;
    #####:  120:    }
        -:  121:
        -:  122:    //mocks the adventurerEffect actions
  2545556:  123:    while(drawntreasure < 2)
branch  0 taken 99%
branch  1 taken 1%
        -:  124:    {
        -:  125:
        -:  126:        //checks if the deck is empty, if so it shuffles the discard and add to the deck
  1262778:  127:        if (pre.deckCount[p] < 1)
branch  0 taken 0%
branch  1 taken 100%
        -:  128:        {
    #####:  129:            s = shuffle(p, &pre);
        -:  130:
        -:  131:            //checks if shuffle failed
    #####:  132:            if (s == -1 && pre.deckCount[p] >= 1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  133:            {
    #####:  134:                shuffleFails++;
    #####:  135:            }
    #####:  136:        }
        -:  137:
        -:  138:        //draws card
  1262778:  139:        t = drawCard(p, &pre);
        -:  140:
        -:  141:        //checks if drawcard failed
  1262778:  142:        if (t == -1 && pre.deckCount[p] != 0)
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        -:  143:        {
    #####:  144:            drawCardFails++;
    #####:  145:        }
        -:  146:
        -:  147:        //get the most recently drawn card at the top of the hand
  1262778:  148:        cardDrawn = pre.hand[p][pre.handCount[p] - 1];
        -:  149:
        -:  150:        //inc the treasure counter if a treasure is drawn
  3768601:  151:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 99%
branch  1 taken 1%
branch  2 taken 99%
branch  3 taken 1%
branch  4 taken 1%
branch  5 taken 99%
        -:  152:        {
    20000:  153:            drawntreasure++;
    20000:  154:        }
        -:  155:
        -:  156:            //otherwise keep drawing and adjust variables to check most recently drawn card
        -:  157:        else
        -:  158:        {
  1242778:  159:            temphand[z] = cardDrawn;
  1242778:  160:            pre.handCount[p]--;
  1242778:  161:            z++;
        -:  162:        }
        -:  163:    }
        -:  164:
        -:  165:    //discards all cards that have been drawn
  2505556:  166:    while(z - 1 >= 0)
branch  0 taken 99%
branch  1 taken 1%
        -:  167:    {
  1242778:  168:        pre.discard[p][pre.discardCount[p]++] = temphand[z - 1];
  1242778:  169:        z = z - 1;
        -:  170:    }
        -:  171:
        -:  172:    //get the post treasure count
  5090874:  173:    for (i = 0; i < post->handCount[p]; i++)
branch  0 taken 99%
branch  1 taken 1%
        -:  174:    {
  2535437:  175:        card = post->hand[p][i];
        -:  176:
  7576489:  177:        if (card == copper || card == silver || card == gold)
branch  0 taken 99%
branch  1 taken 1%
branch  2 taken 99%
branch  3 taken 1%
branch  4 taken 1%
branch  5 taken 99%
        -:  178:        {
    30000:  179:            PostTreasureCount++;
    30000:  180:        }
  2535437:  181:    }
        -:  182:
        -:  183:    //gets the pre treasure count
  5070874:  184:    for (i = 0; i < pre.handCount[p]; i++)
branch  0 taken 99%
branch  1 taken 1%
        -:  185:    {
  2525437:  186:        card = pre.hand[p][i];
        -:  187:
  7556578:  188:        if (card == copper || card == silver || card == gold)
branch  0 taken 99%
branch  1 taken 1%
branch  2 taken 99%
branch  3 taken 1%
branch  4 taken 1%
branch  5 taken 99%
        -:  189:        {
    20000:  190:            PreTreasureCount++;
    20000:  191:        }
  2525437:  192:    }
        -:  193:
        -:  194:    //checks if the counts are mismatched
    10000:  195:    if (PostTreasureCount != PreTreasureCount) {
branch  0 taken 100%
branch  1 taken 0%
    10000:  196:        treasureCountFails++;
    10000:  197:    }
        -:  198:
        -:  199:    //gets the values for the hand and deck counts
    10000:  200:    int postHC = post->handCount[p];
    10000:  201:    int postDC = post->deckCount[p];
    10000:  202:    int postDCC = post->discardCount[p];
    10000:  203:    int preHC = pre.handCount[p];
    10000:  204:    int preDC = pre.deckCount[p];
    10000:  205:    int preDCC = pre.discardCount[p];
        -:  206:
        -:  207:    //checks if the hand deck counts are mismatched
    10000:  208:    if (!(postHC == preHC && postDC == preDC && postDCC == preDCC))
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  209:    {
    10000:  210:        deckHandCountFails++;
    10000:  211:    }
    10000:  212:}
