RANDOM TEST - adventurerEffect()

RESULTS
PASSED: 10000
FAILED: 0
RANDOM TEST PASSED

COVERAGE
File 'randomtestadventurer.c'
Lines executed:75.26% of 97
Branches executed:89.29% of 56
Taken at least once:73.21% of 56
No calls
randomtestadventurer.c:creating 'randomtestadventurer.c.gcov'

File 'dominion.c'
Lines executed:34.90% of 639
Branches executed:41.97% of 417
Taken at least once:27.34% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:// Assignment 2
        -:    9:
function compare called 676568 returned 100% blocks executed 100%
        -:   10:int compare(const void* a, const void* b) {
   676568:   11:  if (*(int*)a > *(int*)b)
branch  0 taken 52%
branch  1 taken 48%
   353074:   12:    return 1;
   323494:   13:  if (*(int*)a < *(int*)b)
branch  0 taken 99%
branch  1 taken 1%
   323314:   14:    return -1;
      180:   15:  return 0;
   676568:   16:}
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
        -:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
function initializeGame called 9 returned 100% blocks executed 87%
        -:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:                   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;
        -:   45:  //set up random number generator
        9:   46:  SelectStream(1);
        9:   47:  PutSeed((long)randomSeed);
        -:   48:
        -:   49:  //check number of players
       18:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   51:  {
    #####:   52:    return -1;
        -:   53:  }
        -:   54:
        -:   55:  //set number of players
        9:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
      198:   59:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:  {
     1980:   61:    for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   62:    {
     1710:   63:      if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   64:      {
    #####:   65:        return -1;
        -:   66:      }
      900:   67:    }
       90:   68:  }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        9:   75:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   76:  {
        9:   77:    state->supplyCount[curse] = 10;
        9:   78:  }
    #####:   79:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   80:  {
    #####:   81:    state->supplyCount[curse] = 20;
    #####:   82:  }
        -:   83:  else
        -:   84:  {
    #####:   85:    state->supplyCount[curse] = 30;
        -:   86:  }
        -:   87:
        -:   88:  //set number of Victory cards
        9:   89:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   90:  {
        9:   91:    state->supplyCount[estate] = 8;
        9:   92:    state->supplyCount[duchy] = 8;
        9:   93:    state->supplyCount[province] = 8;
        9:   94:  }
        -:   95:  else
        -:   96:  {
    #####:   97:    state->supplyCount[estate] = 12;
    #####:   98:    state->supplyCount[duchy] = 12;
    #####:   99:    state->supplyCount[province] = 12;
        -:  100:  }
        -:  101:
        -:  102:  //set number of Treasure cards
        9:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  104:  state->supplyCount[silver] = 40;
        9:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
      378:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  109:  {
     2970:  110:    for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  111:    {
     1395:  112:      if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  113:      {
        -:  114:        //check if card is a 'Victory' Kingdom card
      171:  115:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        -:  116:        {
       18:  117:          if (numPlayers == 2){
branch  0 taken 100%
branch  1 taken 0%
       18:  118:            state->supplyCount[i] = 8;
       18:  119:          }
    #####:  120:          else{ state->supplyCount[i] = 12; }
       18:  121:        }
        -:  122:        else
        -:  123:        {
       72:  124:          state->supplyCount[i] = 10;
        -:  125:        }
       90:  126:        break;
        -:  127:      }
        -:  128:      else    //card is not in the set choosen for the game
        -:  129:      {
     1305:  130:        state->supplyCount[i] = -1;
        -:  131:      }
     1305:  132:    }
        -:  133:
      180:  134:  }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
       54:  140:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  141:  {
       18:  142:    state->deckCount[i] = 0;
      144:  143:    for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  144:    {
       54:  145:      state->deck[i][j] = estate;
       54:  146:      state->deckCount[i]++;
       54:  147:    }
      288:  148:    for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  149:    {
      126:  150:      state->deck[i][j] = copper;
      126:  151:      state->deckCount[i]++;
      126:  152:    }
       18:  153:  }
        -:  154:
        -:  155:  //shuffle player decks
       54:  156:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  157:  {
       18:  158:    if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  159:    {
    #####:  160:      return -1;
        -:  161:    }
       18:  162:  }
        -:  163:
        -:  164:  //draw player hands
       54:  165:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  166:  {
        -:  167:    //initialize hand size to zero
       18:  168:    state->handCount[i] = 0;
       18:  169:    state->discardCount[i] = 0;
        -:  170:    //draw 5 cards
        -:  171:    // for (j = 0; j < 5; j++)
        -:  172:    //	{
        -:  173:    //	  drawCard(i, state);
        -:  174:    //	}
       18:  175:  }
        -:  176:
        -:  177:  //set embargo tokens to 0 for all supply piles
      504:  178:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  179:  {
      243:  180:    state->embargoTokens[i] = 0;
      243:  181:  }
        -:  182:
        -:  183:  //initialize first player's turn
        9:  184:  state->outpostPlayed = 0;
        9:  185:  state->phase = 0;
        9:  186:  state->numActions = 1;
        9:  187:  state->numBuys = 1;
        9:  188:  state->playedCardCount = 0;
        9:  189:  state->whoseTurn = 0;
        9:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
      108:  194:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
       45:  195:    drawCard(state->whoseTurn, state);
       45:  196:  }
        -:  197:
        9:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
        9:  200:  return 0;
        9:  201:}
        -:  202:
function shuffle called 348 returned 100% blocks executed 100%
        -:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
      348:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
      348:  211:  if (state->deckCount[player] < 1)
branch  0 taken 1%
branch  1 taken 99%
        2:  212:    return -1;
      346:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
   167624:  216:  while (state->deckCount[player] > 0) {
branch  0 taken 99%
branch  1 taken 1%
    83466:  217:    card = floor(Random() * state->deckCount[player]);
    83466:  218:    newDeck[newDeckPos] = state->deck[player][card];
    83466:  219:    newDeckPos++;
 13756294:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 99%
branch  1 taken 1%
  6794681:  221:      state->deck[player][i] = state->deck[player][i+1];
  6794681:  222:    }
    83466:  223:    state->deckCount[player]--;
        -:  224:  }
   167624:  225:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 99%
branch  1 taken 1%
    83466:  226:    state->deck[player][i] = newDeck[i];
    83466:  227:    state->deckCount[player]++;
    83466:  228:  }
        -:  229:
      346:  230:  return 0;
      348:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
        -:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  234:{
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:  {
    #####:  241:    return -1;
        -:  242:  }
        -:  243:
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:  {
    #####:  247:    return -1;
        -:  248:  }
        -:  249:
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:  {
    #####:  256:    return -1;
        -:  257:  }
        -:  258:
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  261:  {
    #####:  262:    return -1;
        -:  263:  }
        -:  264:
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:
    #####:  271:  return 0;
    #####:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
        -:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  293:    if (DEBUG)
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:
    #####:  310:  return 0;
    #####:  311:}
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
        -:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 7 returned 100% blocks executed 100%
        -:  322:int supplyCount(int card, struct gameState *state) {
        7:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:  {
    #####:  332:    if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  333:  }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:  {
    #####:  337:    if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  338:  }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:  {
    #####:  342:    if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  343:  }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
function whoseTurn called 30004 returned 100% blocks executed 100%
        -:  348:int whoseTurn(struct gameState *state) {
    30004:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
        -:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
function isGameOver called 6 returned 100% blocks executed 100%
        -:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:
        -:  396:  //if stack of Province cards is empty, the game ends
        6:  397:  if (state->supplyCount[province] == 0)
branch  0 taken 33%
branch  1 taken 67%
        -:  398:  {
        2:  399:    return 1;
        -:  400:  }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
        4:  403:  j = 0;
      208:  404:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  405:  {
      100:  406:    if (state->supplyCount[i] == 0)
branch  0 taken 6%
branch  1 taken 94%
        -:  407:    {
        6:  408:      j++;
        6:  409:    }
      100:  410:  }
        4:  411:  if ( j >= 3)
branch  0 taken 50%
branch  1 taken 50%
        -:  412:  {
        2:  413:    return 1;
        -:  414:  }
        -:  415:
        2:  416:  return 0;
        6:  417:}
        -:  418:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  425:  {
    #####:  426:    if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  427:    if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:    if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  429:    if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  430:    if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:    if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  432:  }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  436:  {
    #####:  437:    if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:    if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:    if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  440:    if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  441:    if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:    if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  443:  }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  447:  {
    #####:  448:    if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:    if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:    if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  451:    if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  452:    if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:    if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  454:  }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
function getWinners called 0 returned 0% blocks executed 0%
        -:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  467:  {
        -:  468:    //set unused player scores to -9999
    #####:  469:    if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  470:    {
    #####:  471:      players[i] = -9999;
    #####:  472:    }
        -:  473:    else
        -:  474:    {
    #####:  475:      players[i] = scoreFor (i, state);
        -:  476:    }
    #####:  477:  }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  482:  {
    #####:  483:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  484:    {
    #####:  485:      j = i;
    #####:  486:    }
    #####:  487:  }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  493:  {
    #####:  494:    if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  495:    {
    #####:  496:      players[i]++;
    #####:  497:    }
    #####:  498:  }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:  {
    #####:  504:    if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  505:    {
    #####:  506:      j = i;
    #####:  507:    }
    #####:  508:  }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  513:  {
    #####:  514:    if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  515:    {
    #####:  516:      players[i] = 1;
    #####:  517:    }
        -:  518:    else
        -:  519:    {
    #####:  520:      players[i] = 0;
        -:  521:    }
    #####:  522:  }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
function drawCard called 2705717 returned 100% blocks executed 91%
        -:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
  2705717:  530:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  531:
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
   167184:  535:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 99%
branch  1 taken 1%
    83266:  536:      state->deck[player][i] = state->discard[player][i];
    83266:  537:      state->discard[player][i] = -1;
    83266:  538:    }
        -:  539:
      326:  540:    state->deckCount[player] = state->discardCount[player];
      326:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
      326:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:
      326:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
      326:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:
      326:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
      326:  561:    if (deckCounter == 0)
branch  0 taken 0%
branch  1 taken 100%
    #####:  562:      return -1;
        -:  563:
      326:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      326:  565:    state->deckCount[player]--;
      326:  566:    state->handCount[player]++;//Increment hand count
      326:  567:  }
        -:  568:
        -:  569:  else{
  2705391:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
  2705391:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
  2705391:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  2705391:  578:    state->deckCount[player]--;
  2705391:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
  2705717:  582:  return 0;
  2705717:  583:}
        -:  584:
function getCost called 2 returned 100% blocks executed 16%
        -:  585:int getCost(int cardNumber)
        -:  586:{
        2:  587:  switch( cardNumber )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 50%
branch  5 taken 50%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  588:  {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
        1:  598:      return 0;
        -:  599:    case silver:
        1:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo:
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:  }
        -:  644:
    #####:  645:  return -1;
        2:  646:}
        -:  647:
function cardEffect called 30004 returned 100% blocks executed 18%
        -:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
    30004:  655:  int currentPlayer = whoseTurn(state);
    30004:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
    30004:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
    30004:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
    30004:  662:  int z = 0;// this is the counter for the temp hand
    30004:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 33%
branch  1 taken 67%
    10011:  664:    nextPlayer = 0;
    10011:  665:  }
        -:  666:
        -:  667:
        -:  668:  //uses switch to select card and perform actions
    30004:  669:  switch( card )
branch  0 taken 33%
branch  1 taken 33%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 1%
branch  5 taken 0%
branch  6 taken 33%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  670:  {
        -:  671:    case adventurer:
  2545562:  672:      while(drawntreasure<2){
branch  0 taken 99%
branch  1 taken 1%
  1262780:  673:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0%
branch  1 taken 100%
    #####:  674:          shuffle(currentPlayer, state);
    #####:  675:        }
  1262780:  676:        drawCard(currentPlayer, state);
  1262780:  677:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
  3768432:  678:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 99%
branch  1 taken 1%
branch  2 taken 99%
branch  3 taken 1%
branch  4 taken 1%
branch  5 taken 99%
    20002:  679:          drawntreasure++;
        -:  680:        else{
  1242778:  681:          temphand[z]=cardDrawn;
  1242778:  682:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
  1242778:  683:          z++;
        -:  684:        }
        -:  685:      }
  2505558:  686:          while(z-1>=0){
branch  0 taken 99%
branch  1 taken 1%
  1242778:  687:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
  1242778:  688:            z=z-1;
        -:  689:          }
    10001:  690:          return 0;
        -:  691:
        -:  692:    case council_room:
        -:  693:      //+4 Cards
   100010:  694:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  695:      {
    40004:  696:        drawCard(currentPlayer, state);
    40004:  697:      }
        -:  698:
        -:  699:          //+1 Buy
    10001:  700:          state->numBuys++;
        -:  701:
        -:  702:          //Each other player draws a card
    80112:  703:          for (i = 0; i < state->numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  704:          {
    30055:  705:            if ( i != currentPlayer )
branch  0 taken 67%
branch  1 taken 33%
        -:  706:            {
    20054:  707:              drawCard(i, state);
    20054:  708:            }
    30055:  709:          }
        -:  710:
        -:  711:          //put played card in played card pile
    10001:  712:          discardCard(handPos, currentPlayer, state, 0);
        -:  713:
    10001:  714:          return 0;
        -:  715:
        -:  716:    case feast:
        -:  717:      //gain card with cost up to 5
        -:  718:      //Backup hand
    #####:  719:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  720:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  721:        state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  722:      }
        -:  723:          //Backup hand
        -:  724:
        -:  725:          //Update Coins for Buy
    #####:  726:          updateCoins(currentPlayer, state, 5);
    #####:  727:          x = 1;//Condition to loop on
    #####:  728:          while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  729:            if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  730:              if (DEBUG)
        -:  731:                printf("None of that card left, sorry!\n");
        -:  732:
        -:  733:              if (DEBUG){
        -:  734:                printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  735:              }
    #####:  736:            }
    #####:  737:            else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  738:              printf("That card is too expensive!\n");
        -:  739:
        -:  740:              if (DEBUG){
        -:  741:                printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  742:              }
    #####:  743:            }
        -:  744:            else{
        -:  745:
        -:  746:              if (DEBUG){
        -:  747:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  748:              }
        -:  749:
    #####:  750:              gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  751:              x = 0;//No more buying cards
        -:  752:
        -:  753:              if (DEBUG){
        -:  754:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:              }
        -:  756:
        -:  757:            }
        -:  758:          }
        -:  759:
        -:  760:          //Reset Hand
    #####:  761:          for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  762:            state->hand[currentPlayer][i] = temphand[i];
    #####:  763:            temphand[i] = -1;
    #####:  764:          }
        -:  765:          //Reset Hand
        -:  766:
    #####:  767:          return 0;
        -:  768:
        -:  769:    case gardens:
    #####:  770:      return -1;
        -:  771:
        -:  772:    case mine:
        1:  773:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  774:
        2:  775:          if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  776:          {
    #####:  777:            return -1;
        -:  778:          }
        -:  779:
        2:  780:          if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  781:          {
    #####:  782:            return -1;
        -:  783:          }
        -:  784:
        1:  785:          if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 taken 0%
branch  1 taken 100%
        -:  786:          {
    #####:  787:            return -1;
        -:  788:          }
        -:  789:
        1:  790:          gainCard(choice2, state, 2, currentPlayer);
        -:  791:
        -:  792:          //discard card from hand
        1:  793:          discardCard(handPos, currentPlayer, state, 0);
        -:  794:
        -:  795:          //discard trashed card
        4:  796:          for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0%
        -:  797:          {
        2:  798:            if (state->hand[currentPlayer][i] == j)
branch  0 taken 50%
branch  1 taken 50%
        -:  799:            {
        1:  800:              discardCard(i, currentPlayer, state, 0);
        1:  801:              break;
        -:  802:            }
        1:  803:          }
        -:  804:
        1:  805:          return 0;
        -:  806:
        -:  807:    case remodel:
    #####:  808:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  809:
    #####:  810:          if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  811:          {
    #####:  812:            return -1;
        -:  813:          }
        -:  814:
    #####:  815:          gainCard(choice2, state, 0, currentPlayer);
        -:  816:
        -:  817:          //discard card from hand
    #####:  818:          discardCard(handPos, currentPlayer, state, 0);
        -:  819:
        -:  820:          //discard trashed card
    #####:  821:          for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  822:          {
    #####:  823:            if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  824:            {
    #####:  825:              discardCard(i, currentPlayer, state, 0);
    #####:  826:              break;
        -:  827:            }
    #####:  828:          }
        -:  829:
        -:  830:
    #####:  831:          return 0;
        -:  832:
        -:  833:    case smithy:
        -:  834:      //+3 Cards
    80008:  835:      for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  836:      {
    30003:  837:        drawCard(currentPlayer, state);
    30003:  838:      }
        -:  839:
        -:  840:          //discard card from hand
    10001:  841:          discardCard(handPos, currentPlayer, state, 0);
    10001:  842:          return 0;
        -:  843:
        -:  844:    case village:
        -:  845:      //+1 Card
    #####:  846:      drawCard(currentPlayer, state);
        -:  847:
        -:  848:          //+2 Actions
    #####:  849:          state->numActions = state->numActions + 2;
        -:  850:
        -:  851:          //discard played card from hand
    #####:  852:          discardCard(handPos, currentPlayer, state, 0);
    #####:  853:          return 0;
        -:  854:
        -:  855:    case baron:
    #####:  856:      state->numBuys++;//Increase buys by 1!
    #####:  857:          if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  858:            int p = 0;//Iterator for hand!
    #####:  859:            int card_not_discarded = 1;//Flag for discard set!
    #####:  860:            while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  861:              if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  862:                state->coins += 4;//Add 4 coins to the amount of coins
    #####:  863:                state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  864:                state->discardCount[currentPlayer]++;
    #####:  865:                for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  866:                  state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  867:                }
    #####:  868:                state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  869:                state->handCount[currentPlayer]--;
    #####:  870:                card_not_discarded = 0;//Exit the loop
    #####:  871:              }
    #####:  872:              else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  873:                if(DEBUG) {
        -:  874:                  printf("No estate cards in your hand, invalid choice\n");
        -:  875:                  printf("Must gain an estate if there are any\n");
        -:  876:                }
    #####:  877:                if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  878:                  gainCard(estate, state, 0, currentPlayer);
    #####:  879:                  state->supplyCount[estate]--;//Decrement estates
    #####:  880:                  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  881:                    isGameOver(state);
    #####:  882:                  }
    #####:  883:                }
    #####:  884:                card_not_discarded = 0;//Exit the loop
    #####:  885:              }
        -:  886:
        -:  887:              else{
    #####:  888:                p++;//Next card
        -:  889:              }
        -:  890:            }
    #####:  891:          }
        -:  892:
        -:  893:          else{
    #####:  894:            if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  895:              gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  896:              state->supplyCount[estate]--;//Decrement Estates
    #####:  897:              if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  898:                isGameOver(state);
    #####:  899:              }
    #####:  900:            }
        -:  901:          }
        -:  902:
        -:  903:
    #####:  904:          return 0;
        -:  905:
        -:  906:    case great_hall:
        -:  907:      //+1 Card
    #####:  908:      drawCard(currentPlayer, state);
        -:  909:
        -:  910:          //+1 Actions
    #####:  911:          state->numActions++;
        -:  912:
        -:  913:          //discard card from hand
    #####:  914:          discardCard(handPos, currentPlayer, state, 0);
    #####:  915:          return 0;
        -:  916:
        -:  917:    case minion:
        -:  918:      //+1 action
    #####:  919:      state->numActions++;
        -:  920:
        -:  921:          //discard card from hand
    #####:  922:          discardCard(handPos, currentPlayer, state, 0);
        -:  923:
    #####:  924:          if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  925:          {
    #####:  926:            state->coins = state->coins + 2;
    #####:  927:          }
        -:  928:
    #####:  929:          else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  930:          {
        -:  931:            //discard hand
    #####:  932:            while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  933:            {
    #####:  934:              discardCard(handPos, currentPlayer, state, 0);
        -:  935:            }
        -:  936:
        -:  937:            //draw 4
    #####:  938:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  939:            {
    #####:  940:              drawCard(currentPlayer, state);
    #####:  941:            }
        -:  942:
        -:  943:            //other players discard hand and redraw if hand size > 4
    #####:  944:            for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  945:            {
    #####:  946:              if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  947:              {
    #####:  948:                if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  949:                {
        -:  950:                  //discard hand
    #####:  951:                  while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  952:                  {
    #####:  953:                    discardCard(handPos, i, state, 0);
        -:  954:                  }
        -:  955:
        -:  956:                  //draw 4
    #####:  957:                  for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  958:                  {
    #####:  959:                    drawCard(i, state);
    #####:  960:                  }
    #####:  961:                }
    #####:  962:              }
    #####:  963:            }
        -:  964:
    #####:  965:          }
    #####:  966:          return 0;
        -:  967:
        -:  968:    case steward:
    #####:  969:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  970:      {
        -:  971:        //+2 cards
    #####:  972:        drawCard(currentPlayer, state);
    #####:  973:        drawCard(currentPlayer, state);
    #####:  974:      }
    #####:  975:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  976:      {
        -:  977:        //+2 coins
    #####:  978:        state->coins = state->coins + 2;
    #####:  979:      }
        -:  980:      else
        -:  981:      {
        -:  982:        //trash 2 cards in hand
    #####:  983:        discardCard(choice2, currentPlayer, state, 1);
    #####:  984:        discardCard(choice3, currentPlayer, state, 1);
        -:  985:      }
        -:  986:
        -:  987:          //discard card from hand
    #####:  988:          discardCard(handPos, currentPlayer, state, 0);
    #####:  989:          return 0;
        -:  990:
        -:  991:    case tribute:
    #####:  992:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  993:        if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  994:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  995:          state->deckCount[nextPlayer]--;
    #####:  996:        }
    #####:  997:        else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  998:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  999:          state->discardCount[nextPlayer]--;
    #####: 1000:        }
        -: 1001:        else{
        -: 1002:          //No Card to Reveal
        -: 1003:          if (DEBUG){
        -: 1004:            printf("No cards to reveal\n");
        -: 1005:          }
        -: 1006:        }
    #####: 1007:      }
        -: 1008:
        -: 1009:      else{
    #####: 1010:        if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1011:          for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1012:            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1013:            state->deckCount[nextPlayer]++;
    #####: 1014:            state->discard[nextPlayer][i] = -1;
    #####: 1015:            state->discardCount[nextPlayer]--;
    #####: 1016:          }
        -: 1017:
    #####: 1018:          shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1019:        }
    #####: 1020:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1021:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1022:        state->deckCount[nextPlayer]--;
    #####: 1023:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1024:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1025:        state->deckCount[nextPlayer]--;
        -: 1026:      }
        -: 1027:
    #####: 1028:          if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1029:            state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1030:            state->playedCardCount++;
    #####: 1031:            tributeRevealedCards[1] = -1;
    #####: 1032:          }
        -: 1033:
    #####: 1034:          for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1035:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1036:              state->coins += 2;
    #####: 1037:            }
        -: 1038:
    #####: 1039:            else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1040:              drawCard(currentPlayer, state);
    #####: 1041:              drawCard(currentPlayer, state);
    #####: 1042:            }
        -: 1043:            else{//Action Card
    #####: 1044:              state->numActions = state->numActions + 2;
        -: 1045:            }
    #####: 1046:          }
        -: 1047:
    #####: 1048:          return 0;
        -: 1049:
        -: 1050:    case ambassador:
    #####: 1051:      j = 0;		//used to check if player has enough cards to discard
        -: 1052:
    #####: 1053:          if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1054:          {
    #####: 1055:            return -1;
        -: 1056:          }
        -: 1057:
    #####: 1058:          if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1059:          {
    #####: 1060:            return -1;
        -: 1061:          }
        -: 1062:
    #####: 1063:          for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1064:          {
    #####: 1065:            if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1066:            {
    #####: 1067:              j++;
    #####: 1068:            }
    #####: 1069:          }
    #####: 1070:          if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1071:          {
    #####: 1072:            return -1;
        -: 1073:          }
        -: 1074:
        -: 1075:          if (DEBUG)
        -: 1076:            printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1077:
        -: 1078:          //increase supply count for choosen card by amount being discarded
    #####: 1079:          state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1080:
        -: 1081:          //each other player gains a copy of revealed card
    #####: 1082:          for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1083:          {
    #####: 1084:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1085:            {
    #####: 1086:              gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1087:            }
    #####: 1088:          }
        -: 1089:
        -: 1090:          //discard played card from hand
    #####: 1091:          discardCard(handPos, currentPlayer, state, 0);
        -: 1092:
        -: 1093:          //trash copies of cards returned to supply
    #####: 1094:          for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1095:          {
    #####: 1096:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1097:            {
    #####: 1098:              if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1099:              {
    #####: 1100:                discardCard(i, currentPlayer, state, 1);
    #####: 1101:                break;
        -: 1102:              }
    #####: 1103:            }
    #####: 1104:          }
        -: 1105:
    #####: 1106:          return 0;
        -: 1107:
        -: 1108:    case cutpurse:
        -: 1109:
    #####: 1110:      updateCoins(currentPlayer, state, 2);
    #####: 1111:          for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1112:          {
    #####: 1113:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1114:            {
    #####: 1115:              for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1116:              {
    #####: 1117:                if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1118:                {
    #####: 1119:                  discardCard(j, i, state, 0);
    #####: 1120:                  break;
        -: 1121:                }
    #####: 1122:                if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1123:                {
    #####: 1124:                  for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1125:                  {
        -: 1126:                    if (DEBUG)
        -: 1127:                      printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1128:                  }
    #####: 1129:                  break;
        -: 1130:                }
    #####: 1131:              }
        -: 1132:
    #####: 1133:            }
        -: 1134:
    #####: 1135:          }
        -: 1136:
        -: 1137:          //discard played card from hand
    #####: 1138:          discardCard(handPos, currentPlayer, state, 0);
        -: 1139:
    #####: 1140:          return 0;
        -: 1141:
        -: 1142:
        -: 1143:    case embargo:
        -: 1144:      //+2 Coins
    #####: 1145:      state->coins = state->coins + 2;
        -: 1146:
        -: 1147:          //see if selected pile is in play
    #####: 1148:          if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1149:          {
    #####: 1150:            return -1;
        -: 1151:          }
        -: 1152:
        -: 1153:          //add embargo token to selected supply pile
    #####: 1154:          state->embargoTokens[choice1]++;
        -: 1155:
        -: 1156:          //trash card
    #####: 1157:          discardCard(handPos, currentPlayer, state, 1);
    #####: 1158:          return 0;
        -: 1159:
        -: 1160:    case outpost:
        -: 1161:      //set outpost flag
    #####: 1162:      state->outpostPlayed++;
        -: 1163:
        -: 1164:          //discard card
    #####: 1165:          discardCard(handPos, currentPlayer, state, 0);
    #####: 1166:          return 0;
        -: 1167:
        -: 1168:    case salvager:
        -: 1169:      //+1 buy
    #####: 1170:      state->numBuys++;
        -: 1171:
    #####: 1172:          if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1173:          {
        -: 1174:            //gain coins equal to trashed card
    #####: 1175:            state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1176:            //trash card
    #####: 1177:            discardCard(choice1, currentPlayer, state, 1);
    #####: 1178:          }
        -: 1179:
        -: 1180:          //discard card
    #####: 1181:          discardCard(handPos, currentPlayer, state, 0);
    #####: 1182:          return 0;
        -: 1183:
        -: 1184:    case sea_hag:
    #####: 1185:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1186:        if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1187:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1188:          state->discardCount[i]++;
    #####: 1189:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1190:        }
    #####: 1191:      }
    #####: 1192:          return 0;
        -: 1193:
        -: 1194:    case treasure_map:
        -: 1195:      //search hand for another treasure_map
    #####: 1196:      index = -1;
    #####: 1197:          for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1198:          {
    #####: 1199:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1200:            {
    #####: 1201:              index = i;
    #####: 1202:              break;
        -: 1203:            }
    #####: 1204:          }
    #####: 1205:          if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1206:          {
        -: 1207:            //trash both treasure cards
    #####: 1208:            discardCard(handPos, currentPlayer, state, 1);
    #####: 1209:            discardCard(index, currentPlayer, state, 1);
        -: 1210:
        -: 1211:            //gain 4 Gold cards
    #####: 1212:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1213:            {
    #####: 1214:              gainCard(gold, state, 1, currentPlayer);
    #####: 1215:            }
        -: 1216:
        -: 1217:            //return success
    #####: 1218:            return 1;
        -: 1219:          }
        -: 1220:
        -: 1221:          //no second treasure_map found in hand
    #####: 1222:          return -1;
        -: 1223:  }
        -: 1224:
    #####: 1225:  return -1;
    30004: 1226:}
        -: 1227:
function discardCard called 40004 returned 100% blocks executed 80%
        -: 1228:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1229:{
        -: 1230:
        -: 1231:  //if card is not trashed, added to Played pile
    40004: 1232:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1233:  {
        -: 1234:    //add card to played pile
    40004: 1235:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    40004: 1236:    state->playedCardCount++;
    40004: 1237:  }
        -: 1238:
        -: 1239:  //set played card to -1
    40004: 1240:  state->hand[currentPlayer][handPos] = -1;
        -: 1241:
        -: 1242:  //remove card from player's hand
    40004: 1243:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1244:  {
        -: 1245:    //reduce number of cards in hand
    #####: 1246:    state->handCount[currentPlayer]--;
    #####: 1247:  }
    40004: 1248:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1249:  {
        -: 1250:    //reduce number of cards in hand
    #####: 1251:    state->handCount[currentPlayer]--;
    #####: 1252:  }
        -: 1253:  else
        -: 1254:  {
        -: 1255:    //replace discarded card with last card in hand
    40004: 1256:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1257:    //set last card to -1
    40004: 1258:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1259:    //reduce number of cards in hand
    40004: 1260:    state->handCount[currentPlayer]--;
        -: 1261:  }
        -: 1262:
    40004: 1263:  return 0;
        -: 1264:}
        -: 1265:
function gainCard called 7 returned 100% blocks executed 100%
        -: 1266:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1267:{
        -: 1268:  //Note: supplyPos is enum of choosen card
        -: 1269:
        -: 1270:  //check if supply pile is empty (0) or card is not used in game (-1)
        7: 1271:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 29%
branch  1 taken 71%
        -: 1272:  {
        2: 1273:    return -1;
        -: 1274:  }
        -: 1275:
        -: 1276:  //added card for [whoseTurn] current player:
        -: 1277:  // toFlag = 0 : add to discard
        -: 1278:  // toFlag = 1 : add to deck
        -: 1279:  // toFlag = 2 : add to hand
        -: 1280:
        5: 1281:  if (toFlag == 1)
branch  0 taken 20%
branch  1 taken 80%
        -: 1282:  {
        1: 1283:    state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1284:    state->deckCount[player]++;
        1: 1285:  }
        4: 1286:  else if (toFlag == 2)
branch  0 taken 50%
branch  1 taken 50%
        -: 1287:  {
        2: 1288:    state->hand[ player ][ state->handCount[player] ] = supplyPos;
        2: 1289:    state->handCount[player]++;
        2: 1290:  }
        -: 1291:  else
        -: 1292:  {
        2: 1293:    state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1294:    state->discardCount[player]++;
        -: 1295:  }
        -: 1296:
        -: 1297:  //decrease number in supply pile
        5: 1298:  state->supplyCount[supplyPos]--;
        -: 1299:
        5: 1300:  return 0;
        7: 1301:}
        -: 1302:
function updateCoins called 15 returned 100% blocks executed 100%
        -: 1303:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1304:{
        -: 1305:  int i;
        -: 1306:
        -: 1307:  //reset coin count
       15: 1308:  state->coins = 0;
        -: 1309:
        -: 1310:  //add coins for each Treasure card in player's hand
      150: 1311:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 80%
branch  1 taken 20%
        -: 1312:  {
       60: 1313:    if (state->hand[player][i] == copper)
branch  0 taken 68%
branch  1 taken 32%
        -: 1314:    {
       41: 1315:      state->coins += 1;
       41: 1316:    }
       19: 1317:    else if (state->hand[player][i] == silver)
branch  0 taken 26%
branch  1 taken 74%
        -: 1318:    {
        5: 1319:      state->coins += 2;
        5: 1320:    }
       14: 1321:    else if (state->hand[player][i] == gold)
branch  0 taken 36%
branch  1 taken 64%
        -: 1322:    {
        5: 1323:      state->coins += 3;
        5: 1324:    }
       60: 1325:  }
        -: 1326:
        -: 1327:  //add bonus
       15: 1328:  state->coins += bonus;
        -: 1329:
       15: 1330:  return 0;
        -: 1331:}
        -: 1332:
        -: 1333:
        -: 1334://end of dominion.c
