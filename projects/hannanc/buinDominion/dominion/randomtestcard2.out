RANDOM TEST - councilRoomEffect()

RESULTS
PASSED: 10000
FAILED: 0
RANDOM TEST PASSED

COVERAGE
File 'randomtestcard2.c'
Lines executed:69.47% of 95
Branches executed:81.48% of 54
Taken at least once:59.26% of 54
No calls
randomtestcard2.c:creating 'randomtestcard2.c.gcov'

File 'dominion.c'
Lines executed:34.78% of 647
Branches executed:41.01% of 417
Taken at least once:26.14% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:10
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 559000 returned 100% blocks executed 100%
        -:    8:int compare(const void* a, const void* b) {
   559000:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 52%
branch  1 taken 48%
   291118:   10:    return 1;
   267882:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 99%
branch  1 taken 1%
   267702:   12:    return -1;
      180:   13:  return 0;
   559000:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 9 returned 100% blocks executed 87%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        9:   44:  SelectStream(1);
        9:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
       18:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:  {
    #####:   50:    return -1;
        -:   51:  }
        -:   52:
        -:   53:  //set number of players
        9:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      198:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:  {
     1980:   59:    for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:    {
     1710:   61:      if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:      {
    #####:   63:        return -1;
        -:   64:      }
      900:   65:    }
       90:   66:  }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        9:   73:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   74:  {
        9:   75:    state->supplyCount[curse] = 10;
        9:   76:  }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:  {
    #####:   79:    state->supplyCount[curse] = 20;
    #####:   80:  }
        -:   81:  else
        -:   82:  {
    #####:   83:    state->supplyCount[curse] = 30;
        -:   84:  }
        -:   85:
        -:   86:  //set number of Victory cards
        9:   87:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   88:  {
        9:   89:    state->supplyCount[estate] = 8;
        9:   90:    state->supplyCount[duchy] = 8;
        9:   91:    state->supplyCount[province] = 8;
        9:   92:  }
        -:   93:  else
        -:   94:  {
    #####:   95:    state->supplyCount[estate] = 12;
    #####:   96:    state->supplyCount[duchy] = 12;
    #####:   97:    state->supplyCount[province] = 12;
        -:   98:  }
        -:   99:
        -:  100:  //set number of Treasure cards
        9:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  102:  state->supplyCount[silver] = 40;
        9:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      378:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:  {
     2970:  108:    for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:    {
     1395:  110:      if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:      {
        -:  112:        //check if card is a 'Victory' Kingdom card
      171:  113:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        -:  114:        {
       18:  115:          if (numPlayers == 2){
branch  0 taken 100%
branch  1 taken 0%
       18:  116:            state->supplyCount[i] = 8;
       18:  117:          }
    #####:  118:          else{ state->supplyCount[i] = 12; }
       18:  119:        }
        -:  120:        else
        -:  121:        {
       72:  122:          state->supplyCount[i] = 10;
        -:  123:        }
       90:  124:        break;
        -:  125:      }
        -:  126:      else    //card is not in the set choosen for the game
        -:  127:      {
     1305:  128:        state->supplyCount[i] = -1;
        -:  129:      }
     1305:  130:    }
        -:  131:
      180:  132:  }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       54:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  139:  {
       18:  140:    state->deckCount[i] = 0;
      144:  141:    for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:    {
       54:  143:      state->deck[i][j] = estate;
       54:  144:      state->deckCount[i]++;
       54:  145:    }
      288:  146:    for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:    {
      126:  148:      state->deck[i][j] = copper;
      126:  149:      state->deckCount[i]++;
      126:  150:    }
       18:  151:  }
        -:  152:
        -:  153:  //shuffle player decks
       54:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  155:  {
       18:  156:    if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:    {
    #####:  158:      return -1;
        -:  159:    }
       18:  160:  }
        -:  161:
        -:  162:  //draw player hands
       54:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  164:  {
        -:  165:    //initialize hand size to zero
       18:  166:    state->handCount[i] = 0;
       18:  167:    state->discardCount[i] = 0;
        -:  168:    //draw 5 cards
        -:  169:    // for (j = 0; j < 5; j++)
        -:  170:    //	{
        -:  171:    //	  drawCard(i, state);
        -:  172:    //	}
       18:  173:  }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      504:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:  {
      243:  178:    state->embargoTokens[i] = 0;
      243:  179:  }
        -:  180:
        -:  181:  //initialize first player's turn
        9:  182:  state->outpostPlayed = 0;
        9:  183:  state->phase = 0;
        9:  184:  state->numActions = 1;
        9:  185:  state->numBuys = 1;
        9:  186:  state->playedCardCount = 0;
        9:  187:  state->whoseTurn = 0;
        9:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      108:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
       45:  193:    drawCard(state->whoseTurn, state);
       45:  194:  }
        -:  195:
        9:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        9:  198:  return 0;
        9:  199:}
        -:  200:
function shuffle called 342 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      342:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      342:  209:  if (state->deckCount[player] < 1)
branch  0 taken 2%
branch  1 taken 98%
        7:  210:    return -1;
      335:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   140300:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 99%
branch  1 taken 1%
    69815:  215:    card = floor(Random() * state->deckCount[player]);
    69815:  216:    newDeck[newDeckPos] = state->deck[player][card];
    69815:  217:    newDeckPos++;
 11221064:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 99%
branch  1 taken 1%
  5540717:  219:      state->deck[player][i] = state->deck[player][i+1];
  5540717:  220:    }
    69815:  221:    state->deckCount[player]--;
        -:  222:  }
   140300:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 99%
branch  1 taken 1%
    69815:  224:    state->deck[player][i] = newDeck[i];
    69815:  225:    state->deckCount[player]++;
    69815:  226:  }
        -:  227:
      335:  228:  return 0;
      342:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:  {
    #####:  239:    return -1;
        -:  240:  }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:  {
    #####:  245:    return -1;
        -:  246:  }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:  {
    #####:  254:    return -1;
        -:  255:  }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:  {
    #####:  260:    return -1;
        -:  261:  }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 7 returned 100% blocks executed 100%
        -:  320:int supplyCount(int card, struct gameState *state) {
        7:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:  {
    #####:  330:    if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:  }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:  {
    #####:  335:    if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:  }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:  {
    #####:  340:    if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:  }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 20004 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
    20004:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 6 returned 100% blocks executed 100%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 33%
branch  1 taken 67%
        -:  396:  {
        2:  397:    return 1;
        -:  398:  }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      208:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  403:  {
      100:  404:    if (state->supplyCount[i] == 0)
branch  0 taken 6%
branch  1 taken 94%
        -:  405:    {
        6:  406:      j++;
        6:  407:    }
      100:  408:  }
        4:  409:  if ( j >= 3)
branch  0 taken 50%
branch  1 taken 50%
        -:  410:  {
        2:  411:    return 1;
        -:  412:  }
        -:  413:
        2:  414:  return 0;
        6:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:  {
    #####:  424:    if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:    if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:    if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:    if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:    if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:    if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:  }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:  {
    #####:  435:    if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:    if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:    if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:    if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:    if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:    if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:  }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:  {
    #####:  446:    if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:    if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:    if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:    if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:    if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:    if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:  }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:  {
        -:  466:    //set unused player scores to -9999
    #####:  467:    if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:    {
    #####:  469:      players[i] = -9999;
    #####:  470:    }
        -:  471:    else
        -:  472:    {
    #####:  473:      players[i] = scoreFor (i, state);
        -:  474:    }
    #####:  475:  }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:  {
    #####:  481:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:    {
    #####:  483:      j = i;
    #####:  484:    }
    #####:  485:  }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:  {
    #####:  492:    if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:    {
    #####:  494:      players[i]++;
    #####:  495:    }
    #####:  496:  }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:  {
    #####:  502:    if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:    {
    #####:  504:      j = i;
    #####:  505:    }
    #####:  506:  }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:  {
    #####:  512:    if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:    {
    #####:  514:      players[i] = 1;
    #####:  515:    }
        -:  516:    else
        -:  517:    {
    #####:  518:      players[i] = 0;
        -:  519:    }
    #####:  520:  }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 183441 returned 100% blocks executed 100%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   183441:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
   139870:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 99%
branch  1 taken 1%
    69615:  534:      state->deck[player][i] = state->discard[player][i];
    69615:  535:      state->discard[player][i] = -1;
    69615:  536:    }
        -:  537:
      320:  538:    state->deckCount[player] = state->discardCount[player];
      320:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      320:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
      320:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      320:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
      320:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      320:  559:    if (deckCounter == 0)
branch  0 taken 2%
branch  1 taken 98%
        5:  560:      return -1;
        -:  561:
      315:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      315:  563:    state->deckCount[player]--;
      315:  564:    state->handCount[player]++;//Increment hand count
      315:  565:  }
        -:  566:
        -:  567:  else{
   183121:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   183121:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   183121:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   183121:  576:    state->deckCount[player]--;
   183121:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   183436:  580:  return 0;
   183441:  581:}
        -:  582:
function getCost called 2 returned 100% blocks executed 16%
        -:  583:int getCost(int cardNumber)
        -:  584:{
        2:  585:  switch( cardNumber )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 50%
branch  5 taken 50%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:  {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:  }
        -:  642:
    #####:  643:  return -1;
        2:  644:}
        -:  645:
        -:  646:
        -:  647:
function adventurerCard called 1 returned 100% blocks executed 66%
        -:  648:void adventurerCard(struct gameState *state, int currentPlayer, int cardDrawn, int temphand[], int drawntreasure, int z){
        6:  649:  while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33%
        2:  650:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0%
branch  1 taken 100%
    #####:  651:      shuffle(currentPlayer, state);
    #####:  652:    }
        2:  653:    drawCard(currentPlayer, state);
        2:  654:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        2:  655:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        2:  656:      drawntreasure++;
        -:  657:    else{
    #####:  658:      temphand[z]=cardDrawn;
    #####:  659:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  660:      z++;
        -:  661:    }
        -:  662:  }
        2:  663:  while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100%
    #####:  664:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  665:  }
        1:  666:}
        -:  667:
function smithyCard called 10001 returned 100% blocks executed 100%
        -:  668:void smithyCard(struct gameState *state, int currentPlayer, int handPos){
        -:  669://+3 Cards
        -:  670:  int i;
   100010:  671:  for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  672:  {
    40004:  673:    drawCard(currentPlayer, state);
    40004:  674:  }
        -:  675:
        -:  676://discard card from hand
    10001:  677:  discardCard(handPos, currentPlayer, state, 0);
    10001:  678:}
        -:  679:
function great_hallCard called 0 returned 0% blocks executed 0%
        -:  680:void great_hallCard(struct gameState *state, int currentPlayer, int handPos){
        -:  681://+1 Card
    #####:  682:  drawCard(currentPlayer, state);
        -:  683:
        -:  684://+1 Actions
    #####:  685:  state->numActions++;
        -:  686:
    #####:  687:}
        -:  688:
function outpostCard called 0 returned 0% blocks executed 0%
        -:  689:void outpostCard(struct gameState *state, int currentPlayer, int handPos){
        -:  690://set outpost flag
    #####:  691:  state->outpostPlayed++;
        -:  692:
        -:  693://discard card
    #####:  694:  discardCard(handPos, currentPlayer, state, 0);
    #####:  695:}
        -:  696:
function council_roomCard called 10001 returned 100% blocks executed 100%
        -:  697:void council_roomCard(struct gameState *state, int currentPlayer, int handPos){
        -:  698:  int i;
        -:  699://+4 Cards
   100010:  700:  for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  701:  {
    40004:  702:    drawCard(currentPlayer, state);
    40004:  703:  }
        -:  704:
        -:  705://+1 Buy
    10001:  706:  state->numBuys++;
        -:  707:
        -:  708://Each other player draws a card
    60102:  709:  for (i = 1; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  710:  {
    20050:  711:    if ( i != currentPlayer )
branch  0 taken 67%
branch  1 taken 33%
        -:  712:    {
    13337:  713:      drawCard(i, state);
    13337:  714:    }
    20050:  715:  }
        -:  716:
        -:  717://put played card in played card pile
    10001:  718:  discardCard(handPos, currentPlayer, state, 0);
        -:  719:
    10001:  720:}
        -:  721:
        -:  722:
        -:  723:
function cardEffect called 20004 returned 100% blocks executed 8%
        -:  724:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  725:{
        -:  726:  int i;
        -:  727:  int j;
        -:  728:  int k;
        -:  729:  int x;
        -:  730:  int index;
    20004:  731:  int currentPlayer = whoseTurn(state);
    20004:  732:  int nextPlayer = currentPlayer + 1;
        -:  733:
    20004:  734:  int tributeRevealedCards[2] = {-1, -1};
        -:  735:  int temphand[MAX_HAND];// moved above the if statement
    20004:  736:  int drawntreasure=0;
        -:  737:  int cardDrawn;
    20004:  738:  int z = 0;// this is the counter for the temp hand
    20004:  739:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 25%
branch  1 taken 75%
     4952:  740:    nextPlayer = 0;
     4952:  741:  }
        -:  742:
        -:  743:  //uses switch to select card and perform actions
    20004:  744:  switch( card )
branch  0 taken 1%
branch  1 taken 50%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 1%
branch  5 taken 0%
branch  6 taken 50%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  745:  {
        -:  746:    case adventurer:
        1:  747:      adventurerCard(state, currentPlayer, cardDrawn, temphand, drawntreasure, z);
        1:  748:          return 0;
        -:  749:
        -:  750:    case council_room:
    10001:  751:      council_roomCard(state, currentPlayer, handPos);
    10001:  752:          return 0;
        -:  753:
        -:  754:    case feast:
        -:  755:      //gain card with cost up to 5
        -:  756:      //Backup hand
    #####:  757:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  758:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  759:        state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  760:      }
        -:  761:          //Backup hand
        -:  762:
        -:  763:          //Update Coins for Buy
    #####:  764:          updateCoins(currentPlayer, state, 5);
    #####:  765:          x = 1;//Condition to loop on
    #####:  766:          while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  767:            if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  768:              if (DEBUG)
        -:  769:                printf("None of that card left, sorry!\n");
        -:  770:
        -:  771:              if (DEBUG){
        -:  772:                printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  773:              }
    #####:  774:            }
    #####:  775:            else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  776:              printf("That card is too expensive!\n");
        -:  777:
        -:  778:              if (DEBUG){
        -:  779:                printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  780:              }
    #####:  781:            }
        -:  782:            else{
        -:  783:
        -:  784:              if (DEBUG){
        -:  785:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  786:              }
        -:  787:
    #####:  788:              gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  789:              x = 0;//No more buying cards
        -:  790:
        -:  791:              if (DEBUG){
        -:  792:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  793:              }
        -:  794:
        -:  795:            }
        -:  796:          }
        -:  797:
        -:  798:          //Reset Hand
    #####:  799:          for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  800:            state->hand[currentPlayer][i] = temphand[i];
    #####:  801:            temphand[i] = -1;
    #####:  802:          }
        -:  803:          //Reset Hand
        -:  804:
    #####:  805:          return 0;
        -:  806:
        -:  807:    case gardens:
    #####:  808:      return -1;
        -:  809:
        -:  810:    case mine:
        1:  811:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  812:
        2:  813:          if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  814:          {
    #####:  815:            return -1;
        -:  816:          }
        -:  817:
        2:  818:          if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  819:          {
    #####:  820:            return -1;
        -:  821:          }
        -:  822:
        1:  823:          if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 taken 0%
branch  1 taken 100%
        -:  824:          {
    #####:  825:            return -1;
        -:  826:          }
        -:  827:
        1:  828:          gainCard(choice2, state, 2, currentPlayer);
        -:  829:
        -:  830:          //discard card from hand
        1:  831:          discardCard(handPos, currentPlayer, state, 0);
        -:  832:
        -:  833:          //discard trashed card
        4:  834:          for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0%
        -:  835:          {
        2:  836:            if (state->hand[currentPlayer][i] == j)
branch  0 taken 50%
branch  1 taken 50%
        -:  837:            {
        1:  838:              discardCard(i, currentPlayer, state, 0);
        1:  839:              break;
        -:  840:            }
        1:  841:          }
        -:  842:
        1:  843:          return 0;
        -:  844:
        -:  845:    case remodel:
    #####:  846:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  847:
    #####:  848:          if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  849:          {
    #####:  850:            return -1;
        -:  851:          }
        -:  852:
    #####:  853:          gainCard(choice2, state, 0, currentPlayer);
        -:  854:
        -:  855:          //discard card from hand
    #####:  856:          discardCard(handPos, currentPlayer, state, 0);
        -:  857:
        -:  858:          //discard trashed card
    #####:  859:          for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  860:          {
    #####:  861:            if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  862:            {
    #####:  863:              discardCard(i, currentPlayer, state, 0);
    #####:  864:              break;
        -:  865:            }
    #####:  866:          }
        -:  867:
        -:  868:
    #####:  869:          return 0;
        -:  870:
        -:  871:    case smithy:
    10001:  872:      smithyCard(state, currentPlayer, handPos);
    10001:  873:          return 0;
        -:  874:
        -:  875:    case village:
        -:  876:      //+1 Card
    #####:  877:      drawCard(currentPlayer, state);
        -:  878:
        -:  879:          //+2 Actions
    #####:  880:          state->numActions = state->numActions + 2;
        -:  881:
        -:  882:          //discard played card from hand
    #####:  883:          discardCard(handPos, currentPlayer, state, 0);
    #####:  884:          return 0;
        -:  885:
        -:  886:    case baron:
    #####:  887:      state->numBuys++;//Increase buys by 1!
    #####:  888:          if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  889:            int p = 0;//Iterator for hand!
    #####:  890:            int card_not_discarded = 1;//Flag for discard set!
    #####:  891:            while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  892:              if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  893:                state->coins += 4;//Add 4 coins to the amount of coins
    #####:  894:                state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  895:                state->discardCount[currentPlayer]++;
    #####:  896:                for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  897:                  state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  898:                }
    #####:  899:                state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  900:                state->handCount[currentPlayer]--;
    #####:  901:                card_not_discarded = 0;//Exit the loop
    #####:  902:              }
    #####:  903:              else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  904:                if(DEBUG) {
        -:  905:                  printf("No estate cards in your hand, invalid choice\n");
        -:  906:                  printf("Must gain an estate if there are any\n");
        -:  907:                }
    #####:  908:                if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  909:                  gainCard(estate, state, 0, currentPlayer);
    #####:  910:                  state->supplyCount[estate]--;//Decrement estates
    #####:  911:                  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  912:                    isGameOver(state);
    #####:  913:                  }
    #####:  914:                }
    #####:  915:                card_not_discarded = 0;//Exit the loop
    #####:  916:              }
        -:  917:
        -:  918:              else{
    #####:  919:                p++;//Next card
        -:  920:              }
        -:  921:            }
    #####:  922:          }
        -:  923:
        -:  924:          else{
    #####:  925:            if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  926:              gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  927:              state->supplyCount[estate]--;//Decrement Estates
    #####:  928:              if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  929:                isGameOver(state);
    #####:  930:              }
    #####:  931:            }
        -:  932:          }
        -:  933:
        -:  934:
    #####:  935:          return 0;
        -:  936:
        -:  937:    case great_hall:
    #####:  938:      great_hallCard(state, currentPlayer, handPos);
    #####:  939:          return 0;
        -:  940:
        -:  941:    case minion:
        -:  942:      //+1 action
    #####:  943:      state->numActions++;
        -:  944:
        -:  945:          //discard card from hand
    #####:  946:          discardCard(handPos, currentPlayer, state, 0);
        -:  947:
    #####:  948:          if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  949:          {
    #####:  950:            state->coins = state->coins + 2;
    #####:  951:          }
        -:  952:
    #####:  953:          else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  954:          {
        -:  955:            //discard hand
    #####:  956:            while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  957:            {
    #####:  958:              discardCard(handPos, currentPlayer, state, 0);
        -:  959:            }
        -:  960:
        -:  961:            //draw 4
    #####:  962:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  963:            {
    #####:  964:              drawCard(currentPlayer, state);
    #####:  965:            }
        -:  966:
        -:  967:            //other players discard hand and redraw if hand size > 4
    #####:  968:            for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  969:            {
    #####:  970:              if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  971:              {
    #####:  972:                if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  973:                {
        -:  974:                  //discard hand
    #####:  975:                  while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  976:                  {
    #####:  977:                    discardCard(handPos, i, state, 0);
        -:  978:                  }
        -:  979:
        -:  980:                  //draw 4
    #####:  981:                  for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  982:                  {
    #####:  983:                    drawCard(i, state);
    #####:  984:                  }
    #####:  985:                }
    #####:  986:              }
    #####:  987:            }
        -:  988:
    #####:  989:          }
    #####:  990:          return 0;
        -:  991:
        -:  992:    case steward:
    #####:  993:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  994:      {
        -:  995:        //+2 cards
    #####:  996:        drawCard(currentPlayer, state);
    #####:  997:        drawCard(currentPlayer, state);
    #####:  998:      }
    #####:  999:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1000:      {
        -: 1001:        //+2 coins
    #####: 1002:        state->coins = state->coins + 2;
    #####: 1003:      }
        -: 1004:      else
        -: 1005:      {
        -: 1006:        //trash 2 cards in hand
    #####: 1007:        discardCard(choice2, currentPlayer, state, 1);
    #####: 1008:        discardCard(choice3, currentPlayer, state, 1);
        -: 1009:      }
        -: 1010:
        -: 1011:          //discard card from hand
    #####: 1012:          discardCard(handPos, currentPlayer, state, 0);
    #####: 1013:          return 0;
        -: 1014:
        -: 1015:    case tribute:
    #####: 1016:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1017:        if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1018:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1019:          state->deckCount[nextPlayer]--;
    #####: 1020:        }
    #####: 1021:        else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1022:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1023:          state->discardCount[nextPlayer]--;
    #####: 1024:        }
        -: 1025:        else{
        -: 1026:          //No Card to Reveal
        -: 1027:          if (DEBUG){
        -: 1028:            printf("No cards to reveal\n");
        -: 1029:          }
        -: 1030:        }
    #####: 1031:      }
        -: 1032:
        -: 1033:      else{
    #####: 1034:        if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1035:          for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1036:            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1037:            state->deckCount[nextPlayer]++;
    #####: 1038:            state->discard[nextPlayer][i] = -1;
    #####: 1039:            state->discardCount[nextPlayer]--;
    #####: 1040:          }
        -: 1041:
    #####: 1042:          shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1043:        }
    #####: 1044:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1045:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1046:        state->deckCount[nextPlayer]--;
    #####: 1047:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:        state->deckCount[nextPlayer]--;
        -: 1050:      }
        -: 1051:
    #####: 1052:          if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1053:            state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1054:            state->playedCardCount++;
    #####: 1055:            tributeRevealedCards[1] = -1;
    #####: 1056:          }
        -: 1057:
    #####: 1058:          for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1059:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1060:              state->coins += 2;
    #####: 1061:            }
        -: 1062:
    #####: 1063:            else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1064:              drawCard(currentPlayer, state);
    #####: 1065:              drawCard(currentPlayer, state);
    #####: 1066:            }
        -: 1067:            else{//Action Card
    #####: 1068:              state->numActions = state->numActions + 2;
        -: 1069:            }
    #####: 1070:          }
        -: 1071:
    #####: 1072:          return 0;
        -: 1073:
        -: 1074:    case ambassador:
    #####: 1075:      j = 0;		//used to check if player has enough cards to discard
        -: 1076:
    #####: 1077:          if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1078:          {
    #####: 1079:            return -1;
        -: 1080:          }
        -: 1081:
    #####: 1082:          if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1083:          {
    #####: 1084:            return -1;
        -: 1085:          }
        -: 1086:
    #####: 1087:          for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1088:          {
    #####: 1089:            if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1090:            {
    #####: 1091:              j++;
    #####: 1092:            }
    #####: 1093:          }
    #####: 1094:          if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1095:          {
    #####: 1096:            return -1;
        -: 1097:          }
        -: 1098:
        -: 1099:          if (DEBUG)
        -: 1100:            printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1101:
        -: 1102:          //increase supply count for choosen card by amount being discarded
    #####: 1103:          state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1104:
        -: 1105:          //each other player gains a copy of revealed card
    #####: 1106:          for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1107:          {
    #####: 1108:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1109:            {
    #####: 1110:              gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1111:            }
    #####: 1112:          }
        -: 1113:
        -: 1114:          //discard played card from hand
    #####: 1115:          discardCard(handPos, currentPlayer, state, 0);
        -: 1116:
        -: 1117:          //trash copies of cards returned to supply
    #####: 1118:          for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1119:          {
    #####: 1120:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1121:            {
    #####: 1122:              if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1123:              {
    #####: 1124:                discardCard(i, currentPlayer, state, 1);
    #####: 1125:                break;
        -: 1126:              }
    #####: 1127:            }
    #####: 1128:          }
        -: 1129:
    #####: 1130:          return 0;
        -: 1131:
        -: 1132:    case cutpurse:
        -: 1133:
    #####: 1134:      updateCoins(currentPlayer, state, 2);
    #####: 1135:          for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1136:          {
    #####: 1137:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1138:            {
    #####: 1139:              for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1140:              {
    #####: 1141:                if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1142:                {
    #####: 1143:                  discardCard(j, i, state, 0);
    #####: 1144:                  break;
        -: 1145:                }
    #####: 1146:                if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1147:                {
    #####: 1148:                  for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1149:                  {
        -: 1150:                    if (DEBUG)
        -: 1151:                      printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1152:                  }
    #####: 1153:                  break;
        -: 1154:                }
    #####: 1155:              }
        -: 1156:
    #####: 1157:            }
        -: 1158:
    #####: 1159:          }
        -: 1160:
        -: 1161:          //discard played card from hand
    #####: 1162:          discardCard(handPos, currentPlayer, state, 0);
        -: 1163:
    #####: 1164:          return 0;
        -: 1165:
        -: 1166:
        -: 1167:    case embargo:
        -: 1168:      //+2 Coins
    #####: 1169:      state->coins = state->coins + 2;
        -: 1170:
        -: 1171:          //see if selected pile is in play
    #####: 1172:          if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1173:          {
    #####: 1174:            return -1;
        -: 1175:          }
        -: 1176:
        -: 1177:          //add embargo token to selected supply pile
    #####: 1178:          state->embargoTokens[choice1]++;
        -: 1179:
        -: 1180:          //trash card
    #####: 1181:          discardCard(handPos, currentPlayer, state, 1);
    #####: 1182:          return 0;
        -: 1183:
        -: 1184:    case outpost:
    #####: 1185:      outpostCard(state, currentPlayer, handPos);
    #####: 1186:          return 0;
        -: 1187:
        -: 1188:    case salvager:
        -: 1189:      //+1 buy
    #####: 1190:      state->numBuys++;
        -: 1191:
    #####: 1192:          if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1193:          {
        -: 1194:            //gain coins equal to trashed card
    #####: 1195:            state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1196:            //trash card
    #####: 1197:            discardCard(choice1, currentPlayer, state, 1);
    #####: 1198:          }
        -: 1199:
        -: 1200:          //discard card
    #####: 1201:          discardCard(handPos, currentPlayer, state, 0);
    #####: 1202:          return 0;
        -: 1203:
        -: 1204:    case sea_hag:
    #####: 1205:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1206:        if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1207:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1208:          state->discardCount[i]++;
    #####: 1209:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1210:        }
    #####: 1211:      }
    #####: 1212:          return 0;
        -: 1213:
        -: 1214:    case treasure_map:
        -: 1215:      //search hand for another treasure_map
    #####: 1216:      index = -1;
    #####: 1217:          for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1218:          {
    #####: 1219:            if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1220:            {
    #####: 1221:              index = i;
    #####: 1222:              break;
        -: 1223:            }
    #####: 1224:          }
    #####: 1225:          if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1226:          {
        -: 1227:            //trash both treasure cards
    #####: 1228:            discardCard(handPos, currentPlayer, state, 1);
    #####: 1229:            discardCard(index, currentPlayer, state, 1);
        -: 1230:
        -: 1231:            //gain 4 Gold cards
    #####: 1232:            for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1233:            {
    #####: 1234:              gainCard(gold, state, 1, currentPlayer);
    #####: 1235:            }
        -: 1236:
        -: 1237:            //return success
    #####: 1238:            return 1;
        -: 1239:          }
        -: 1240:
        -: 1241:          //no second treasure_map found in hand
    #####: 1242:          return -1;
        -: 1243:  }
        -: 1244:
    #####: 1245:  return -1;
    20004: 1246:}
        -: 1247:
function discardCard called 40004 returned 100% blocks executed 80%
        -: 1248:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1249:{
        -: 1250:
        -: 1251:  //if card is not trashed, added to Played pile
    40004: 1252:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1253:  {
        -: 1254:    //add card to played pile
    40004: 1255:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    40004: 1256:    state->playedCardCount++;
    40004: 1257:  }
        -: 1258:
        -: 1259:  //set played card to -1
    40004: 1260:  state->hand[currentPlayer][handPos] = -1;
        -: 1261:
        -: 1262:  //remove card from player's hand
    40004: 1263:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1264:  {
        -: 1265:    //reduce number of cards in hand
    #####: 1266:    state->handCount[currentPlayer]--;
    #####: 1267:  }
    40004: 1268:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1269:  {
        -: 1270:    //reduce number of cards in hand
    #####: 1271:    state->handCount[currentPlayer]--;
    #####: 1272:  }
        -: 1273:  else
        -: 1274:  {
        -: 1275:    //replace discarded card with last card in hand
    40004: 1276:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1277:    //set last card to -1
    40004: 1278:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1279:    //reduce number of cards in hand
    40004: 1280:    state->handCount[currentPlayer]--;
        -: 1281:  }
        -: 1282:
    40004: 1283:  return 0;
        -: 1284:}
        -: 1285:
function gainCard called 7 returned 100% blocks executed 100%
        -: 1286:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1287:{
        -: 1288:  //Note: supplyPos is enum of choosen card
        -: 1289:
        -: 1290:  //check if supply pile is empty (0) or card is not used in game (-1)
        7: 1291:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 29%
branch  1 taken 71%
        -: 1292:  {
        2: 1293:    return -1;
        -: 1294:  }
        -: 1295:
        -: 1296:  //added card for [whoseTurn] current player:
        -: 1297:  // toFlag = 0 : add to discard
        -: 1298:  // toFlag = 1 : add to deck
        -: 1299:  // toFlag = 2 : add to hand
        -: 1300:
        5: 1301:  if (toFlag == 1)
branch  0 taken 20%
branch  1 taken 80%
        -: 1302:  {
        1: 1303:    state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1304:    state->deckCount[player]++;
        1: 1305:  }
        4: 1306:  else if (toFlag == 2)
branch  0 taken 50%
branch  1 taken 50%
        -: 1307:  {
        2: 1308:    state->hand[ player ][ state->handCount[player] ] = supplyPos;
        2: 1309:    state->handCount[player]++;
        2: 1310:  }
        -: 1311:  else
        -: 1312:  {
        2: 1313:    state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1314:    state->discardCount[player]++;
        -: 1315:  }
        -: 1316:
        -: 1317:  //decrease number in supply pile
        5: 1318:  state->supplyCount[supplyPos]--;
        -: 1319:
        5: 1320:  return 0;
        7: 1321:}
        -: 1322:
function updateCoins called 15 returned 100% blocks executed 100%
        -: 1323:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1324:{
        -: 1325:  int i;
        -: 1326:
        -: 1327:  //reset coin count
       15: 1328:  state->coins = 0;
        -: 1329:
        -: 1330:  //add coins for each Treasure card in player's hand
      150: 1331:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 80%
branch  1 taken 20%
        -: 1332:  {
       60: 1333:    if (state->hand[player][i] == copper)
branch  0 taken 68%
branch  1 taken 32%
        -: 1334:    {
       41: 1335:      state->coins += 1;
       41: 1336:    }
       19: 1337:    else if (state->hand[player][i] == silver)
branch  0 taken 26%
branch  1 taken 74%
        -: 1338:    {
        5: 1339:      state->coins += 2;
        5: 1340:    }
       14: 1341:    else if (state->hand[player][i] == gold)
branch  0 taken 36%
branch  1 taken 64%
        -: 1342:    {
        5: 1343:      state->coins += 3;
        5: 1344:    }
       60: 1345:  }
        -: 1346:
        -: 1347:  //add bonus
       15: 1348:  state->coins += bonus;
        -: 1349:
       15: 1350:  return 0;
        -: 1351:}
        -: 1352:
        -: 1353:
        -: 1354://end of dominion.c
