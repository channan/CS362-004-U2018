        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:
        -:    7://sets up counters for tests
        -:    8:int failureCount = 0;
        -:    9:int testCount = 0;
        -:   10:
        -:   11://replaces assert so that code can still compile with failing tests
function assertTrue called 17 returned 100% blocks executed 80%
        -:   12:void assertTrue(int a, int b) {
       17:   13:    if (a == b) {
branch  0 taken 100%
branch  1 taken 0%
       17:   14:        printf("PASSED\n");
       17:   15:        testCount++;
       17:   16:    }
        -:   17:    else {
    #####:   18:        printf("FAILED\n");
    #####:   19:        failureCount++;
    #####:   20:        testCount++;
        -:   21:    }
       17:   22:}
        -:   23:
function main called 1 returned 100% blocks executed 96%
        -:   24:int main () {
        -:   25:    
        -:   26:    //sets up game
        -:   27:    int i;
        1:   28:    int treasureCount = 0;
        1:   29:    int treasureCountOriginal = 0;
        1:   30:    int numPlayers = 2;
        1:   31:    int player0 = 0;
        1:   32:    int player1 = 1;
        -:   33:    int card;
        1:   34:    int handpos = 0;
        1:   35:    int choice1 = 0, choice2 = 0, choice3 = 0;
        1:   36:    int bonus = 0;
        -:   37:
        1:   38:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   39:               remodel, smithy, village, baron, great_hall};
        -:   40:
        1:   41:    int seed = 2000;
        -:   42:
        -:   43:    //inits structs for two games states to compare
        -:   44:    struct gameState state, originalState;
        -:   45:  
        -:   46:    //starts tests
        1:   47:    printf("Starting tests for adventurerEffect()...\n");
        1:   48:    memset(&state,23,sizeof(struct gameState));
        1:   49:    memset(&originalState,23,sizeof(struct gameState));
        -:   50:
        -:   51:    //starts game in one of states
        1:   52:    initializeGame(numPlayers, k, seed, &state);
        -:   53:
        -:   54:    //copies the game to the other state for comparison
        1:   55:    memcpy(&originalState, &state, sizeof(struct gameState));
        -:   56:
        -:   57:    //calls function to test
        1:   58:    cardEffect(adventurer, choice1, choice2, choice3, &state, handpos, &bonus);
        -:   59:
        1:   60:    printf("\nTEST: Player 0 gains 2 cards\n");
        1:   61:    printf("Actual: %d\n",state.handCount[player0]);
        1:   62:    printf("Expected: %d\n",originalState.handCount[player0]+2);
        1:   63:    assertTrue(state.handCount[player0],originalState.handCount[player0]+2);
        -:   64:
        -:   65:    //checks how much treasure is gained
       16:   66:    for (i = 0; i < state.handCount[player0]; i++) {
branch  0 taken 88%
branch  1 taken 13%
        7:   67:        card = state.hand[player0][i];
        9:   68:        if (card == copper || card == silver || card == gold) {
branch  0 taken 14%
branch  1 taken 86%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
        6:   69:            treasureCount++;
        6:   70:        }
        7:   71:    }
        -:   72:
        -:   73:    //checks default treasure count
       12:   74:    for (i = 0; i < originalState.handCount[player0]; i++) {
branch  0 taken 83%
branch  1 taken 17%
        5:   75:        card = originalState.hand[player0][i];
        7:   76:        if (card == copper || card == silver || card == gold) {
branch  0 taken 20%
branch  1 taken 80%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 100%
        4:   77:            treasureCountOriginal++;
        4:   78:        }
        5:   79:    }
        -:   80:
        -:   81:    //compares game state and its copy
        1:   82:    printf("\nTEST: Player 0 gains 2 treasure cards\n");
        -:   83:    
        1:   84:    printf("Actual: %d\n",treasureCount);
        1:   85:    printf("Expected: %d\n",treasureCountOriginal+2);
        1:   86:    assertTrue(treasureCountOriginal+2,treasureCount);
        -:   87:
        1:   88:    printf("\nTEST: No changes to victory card piles\n");
        -:   89:    
        1:   90:    printf("Province Pile\n");
        1:   91:    printf("Actual: %d\n",state.supplyCount[province]);
        1:   92:    printf("Expected: %d\n",originalState.supplyCount[province]);
        1:   93:    assertTrue(state.supplyCount[province],originalState.supplyCount[province]);
        -:   94:    
        1:   95:    printf("\nDuchy Pile\n");
        1:   96:    printf("Actual: %d\n",state.supplyCount[duchy]);
        1:   97:    printf("Expected: %d\n",originalState.supplyCount[duchy]);
        1:   98:    assertTrue(state.supplyCount[duchy],originalState.supplyCount[duchy]);
        -:   99:    
        1:  100:    printf("\nEstate Pile\n");
        1:  101:    printf("Actual: %d\n",state.supplyCount[estate]);
        1:  102:    printf("Expected: %d\n",originalState.supplyCount[estate]);
        1:  103:    assertTrue(state.supplyCount[estate],originalState.supplyCount[estate]);
        -:  104:
        1:  105:    printf("\nTEST: No changes to kingdom card piles\n");
       22:  106:    for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9%
       10:  107:        printf("checking card piles...\n");
       10:  108:        assertTrue(state.supplyCount[k[i]],originalState.supplyCount[k[i]]);
       10:  109:    }
        -:  110:
        1:  111:    printf("\nTEST: Player 1 was not affected\n");
        -:  112:    
        1:  113:    printf("Hand Count\n");
        1:  114:    printf("Actual: %d\n",state.handCount[player1]);
        1:  115:    printf("Expected: %d\n",originalState.handCount[player1]);
        1:  116:    assertTrue(state.handCount[player1],originalState.handCount[player1]);
        -:  117:    
        1:  118:    printf("\nDeck Count\n");
        1:  119:    printf("Actual: %d\n",state.deckCount[player1]);
        1:  120:    printf("Expected: %d\n",originalState.deckCount[player1]);
        1:  121:    assertTrue(state.deckCount[player1],originalState.deckCount[player1]);
        -:  122:
        1:  123:    if (failureCount) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  124:        printf("\nTEST(S) FAILED\n");
    #####:  125:        printf("%d of %d tests failed!\n",failureCount,testCount);
    #####:  126:    }
        -:  127:    else {
        1:  128:        printf("\nTESTS SUCCESSFULLY COMPLETED\n\n");
        -:  129:    }
        -:  130:
        1:  131:    return 0;
        -:  132:}
