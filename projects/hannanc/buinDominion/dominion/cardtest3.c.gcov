        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:
        -:    7://test and failure counters
        -:    8:int failureCount = 0;
        -:    9:int testCount = 0;
        -:   10:
        -:   11://replaces assert
function assertTrue called 18 returned 100% blocks executed 80%
        -:   12:void assertTrue(int a, int b) {
       18:   13:    if (a == b) {
branch  0 taken 100%
branch  1 taken 0%
       18:   14:        printf("PASSED\n");
       18:   15:        testCount++;
       18:   16:    }
        -:   17:    else {
    #####:   18:        printf("FAILED\n");
    #####:   19:        failureCount++;
    #####:   20:        testCount++;
        -:   21:    }
       18:   22:}
        -:   23:
        -:   24://starts tests
function main called 1 returned 100% blocks executed 88%
        -:   25:int main () {
        -:   26:    
        -:   27:    //sets up game
        -:   28:    int i;
        1:   29:    int numPlayers = 2;
        1:   30:    int player0 = 0;
        1:   31:    int player1 = 1;
        -:   32:
        1:   33:    int handpos = 0;
        1:   34:    int choice1 = 0, choice2 = 0, choice3 = 0;
        1:   35:    int bonus = 0;
        -:   36:
        1:   37:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   38:               remodel, smithy, village, baron, great_hall};
        -:   39:
        1:   40:    int seed = 2000;
        -:   41:    
        -:   42:    //multiples game structs for comparison
        -:   43:    struct gameState state, originalState;
        -:   44:
        1:   45:    printf("Starting tests for councilRoomEffect()...\n");
        1:   46:    memset(&state,23,sizeof(struct gameState));
        1:   47:    memset(&originalState,23,sizeof(struct gameState));
        -:   48:
        -:   49:    //starts game
        1:   50:    initializeGame(numPlayers, k, seed, &state);
        -:   51:
        -:   52:    //copies for comparison
        1:   53:    memcpy(&originalState, &state, sizeof(struct gameState));
        -:   54:
        -:   55:    //call function
        1:   56:    cardEffect(council_room, choice1, choice2, choice3, &state, handpos, &bonus);
        -:   57:
        1:   58:    printf("\nTEST: Player 0 gains 4 cards\n");
        1:   59:    printf("Actual: %d\n",state.handCount[player0]);
        1:   60:    printf("Expected: %d\n",originalState.handCount[player0]+3);
        1:   61:    assertTrue(state.handCount[player0],originalState.handCount[player0]+3);
        -:   62:
        1:   63:    printf("\nTEST: Player 0 gains 4 cards from his own pile\n");
        1:   64:    printf("Actual: %d\n",state.deckCount[player0]);
        1:   65:    printf("Expected: %d\n",originalState.deckCount[player0]-4);
        1:   66:    assertTrue(state.deckCount[player0],originalState.deckCount[player0]-4);
        -:   67:
        1:   68:    printf("\nTEST: Player 0 number of buys increments\n");
        1:   69:    printf("Actual: %d\n",state.numBuys);
        1:   70:    printf("Expected: %d\n",originalState.numBuys+1);
        1:   71:    assertTrue(state.numBuys,originalState.numBuys+1);
        -:   72:
        1:   73:    printf("\nTEST: No change to victory card piles\n");
        -:   74:    
        1:   75:    printf("Province Pile\n");
        1:   76:    printf("Actual: %d\n",state.supplyCount[province]);
        1:   77:    printf("Expected: %d\n",originalState.supplyCount[province]);
        1:   78:    assertTrue(state.supplyCount[province],originalState.supplyCount[province]);
        -:   79:    
        1:   80:    printf("\nDuchy Pile\n");
        1:   81:    printf("Actual: %d\n",state.supplyCount[duchy]);
        1:   82:    printf("Expected: %d\n",originalState.supplyCount[duchy]);
        1:   83:    assertTrue(state.supplyCount[duchy],originalState.supplyCount[duchy]);
        -:   84:    
        1:   85:    printf("\nEstate Pile\n");
        1:   86:    printf("Actual: %d\n",state.supplyCount[estate]);
        1:   87:    printf("Expected: %d\n",originalState.supplyCount[estate]);
        1:   88:    assertTrue(state.supplyCount[estate],originalState.supplyCount[estate]);
        -:   89:
        1:   90:    printf("\nTEST: No change to kingdom card piles\n");
       22:   91:    for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9%
       10:   92:        printf("checking card piles...\n");
       10:   93:        assertTrue(state.supplyCount[k[i]],originalState.supplyCount[k[i]]);
       10:   94:    }
        -:   95:
        1:   96:    printf("\nTEST: Player 1 gains a card\n");
        1:   97:    printf("Actual: %d\n",state.handCount[player1]);
        1:   98:    printf("Expected: %d\n",originalState.handCount[player1]+1);
        1:   99:    assertTrue(state.handCount[player1],originalState.handCount[player1]+1);
        -:  100:    
        1:  101:    printf("\nTEST: Player 1 gains a card from his own deck\n");
        1:  102:    printf("Actual: %d\n",state.deckCount[player1]);
        1:  103:    printf("Expected: %d\n",originalState.deckCount[player1]-1);
        1:  104:    assertTrue(state.deckCount[player1],originalState.deckCount[player1]-1);
        -:  105:
        1:  106:    if (failureCount) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  107:        printf("\nTEST(S) FAILED\n");
    #####:  108:        printf("%d of %d tests failed!\n",failureCount,testCount);
    #####:  109:    }
        -:  110:    else {
        1:  111:        printf("\nTESTS SUCCESSFULLY COMPLETED\n\n");
        -:  112:    }
        -:  113:
        1:  114:    return 0;
        -:  115:}
