        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:
        -:    7:// global count of test failures
        -:    8:int failureCount = 0;
        -:    9:int testCount = 0;
        -:   10:
        -:   11:// function to check if two ints are equal or not
function assertTrue called 5 returned 100% blocks executed 80%
        -:   12:void assertTrue(int a, int b) {
        5:   13:    if (a == b) {
branch  0 taken 100%
branch  1 taken 0%
        5:   14:        printf("PASSED\n");
        5:   15:        testCount++;
        5:   16:    }
        -:   17:    else {
    #####:   18:        printf("FAILED\n");
    #####:   19:        failureCount++;
    #####:   20:        testCount++;
        -:   21:    }
        5:   22:}
        -:   23:
        -:   24:// runs the tests
function main called 1 returned 100% blocks executed 80%
        -:   25:int main () {
        -:   26:    // kingdom cards
        1:   27:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   28:               remodel, smithy, village, baron, great_hall};
        1:   29:    int seed = 2000;
        -:   30:    struct gameState state;
        -:   31:
        1:   32:    printf("Starting test for gainCard()...\n");
        -:   33:    
        1:   34:    memset(&state,23,sizeof(struct gameState));
        1:   35:    initializeGame(2, k, seed, &state);
        -:   36:
        1:   37:    printf("\nTEST: Gold supply pile is empty\n");
        -:   38:    
        1:   39:    state.supplyCount[gold] = 0;
        -:   40:    
        1:   41:    printf("Actual: %d\n",gainCard(gold,&state,0,0));
        1:   42:    printf("Expected: %d\n",-1);
        1:   43:    assertTrue(gainCard(gold,&state,0,0),-1);
        -:   44:    
        1:   45:    state.supplyCount[gold] = 30;
        -:   46:
        1:   47:    printf("\nTEST: Add card to deck\n");
        -:   48:    
        1:   49:    int deckCount = state.deckCount[0];
        1:   50:    gainCard(gold,&state,1,0);
        -:   51:    
        1:   52:    printf("Actual: %d\n",state.deckCount[0]);
        1:   53:    printf("Expected: %d\n",deckCount+1);
        1:   54:    assertTrue(deckCount+1,state.deckCount[0]);
        -:   55:
        1:   56:    printf("\nTEST: Add card to hand\n");
        -:   57:    
        1:   58:    int handCount = state.handCount[0];
        1:   59:    gainCard(gold,&state,2,0);
        -:   60:    
        1:   61:    printf("Actual: %d\n",state.handCount[0]);
        1:   62:    printf("Expected: %d\n",handCount+1);
        1:   63:    assertTrue(handCount+1,state.handCount[0]);
        -:   64:
        1:   65:    printf("\nTEST: Add card to discard pile\n");
        -:   66:    
        1:   67:    int discardCount = state.discardCount[0];
        1:   68:    gainCard(gold,&state,0,0);
        -:   69:    
        1:   70:    printf("Actual: %d\n",state.discardCount[0]);
        1:   71:    printf("Expected: %d\n",discardCount+1);
        1:   72:    assertTrue(discardCount+1,state.discardCount[0]);
        -:   73:
        1:   74:    printf("\nTEST: Decrease gold supply\n");
        -:   75:    
        1:   76:    int goldSupply = state.supplyCount[gold];
        1:   77:    gainCard(gold,&state,0,0);
        -:   78:    
        1:   79:    printf("Actual: %d\n",state.supplyCount[gold]);
        1:   80:    printf("Expected: %d\n",goldSupply-1);
        1:   81:    assertTrue(goldSupply-1,state.supplyCount[gold]);
        -:   82:
        1:   83:    if (failureCount) {
branch  0 taken 0%
branch  1 taken 100%
    #####:   84:        printf("\nTEST(S) FAILED\n");
    #####:   85:        printf("%d of %d tests failed!\n",failureCount,testCount);
    #####:   86:    }
        -:   87:    else {
        1:   88:        printf("\nTESTS SUCCESSFULLY COMPLETED\n\n");
        -:   89:    }
        -:   90:
        1:   91:    return 0;
        -:   92:}
