        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:#include <stdio.h>
        -:    8:#include <time.h>
        -:    9:#include <math.h>
        -:   10:
        -:   11://fail counters
        -:   12:int cardEffectFails = 0;
        -:   13:int discardCardFails = 0;
        -:   14:int drawCardFails = 0;
        -:   15:int deckHandCountFails = 0;
        -:   16:int numBuysFails = 0;
        -:   17:int otherPlayerDeckHandFails = 0;
        -:   18:
        -:   19:void checkCouncilRoomEffect(int p, struct gameState *post);
        -:   20:
function main called 1 returned 100% blocks executed 94%
        -:   21:int main ()
        -:   22:{
        1:   23:    printf("RANDOM TEST - councilRoomEffect()\n");
        -:   24:
        1:   25:    int iterations = 10000;
        -:   26:    int i, n, player, deckCount, handCount, discardCount;
        1:   27:    int numberOfPlayers[] = {2,3,4};
        -:   28:    struct gameState G;
        1:   29:    srand(time(NULL));
        -:   30:
        -:   31:    //randomly inits the gamestate, code is from the lecture notes
    20002:   32:    for (n = 0; n < iterations; n++)
branch  0 taken 99%
branch  1 taken 1%
        -:   33:    {
526020000:   34:        for (i = 0; i < sizeof(struct gameState); i++)
branch  0 taken 99%
branch  1 taken 1%
        -:   35:        {
263000000:   36:            ((char*)&G)[i] = floor(Random() * 256);
263000000:   37:        }
        -:   38:
        -:   39:        //randomly sets different game variables
    10000:   40:        G.numPlayers = numberOfPlayers[rand() % 3];
    10000:   41:        G.numBuys = 1;
    10000:   42:        G.playedCardCount = floor(Random() * (MAX_DECK-1));
    10000:   43:        player = G.numPlayers - 2;
    10000:   44:        deckCount = floor(Random() * MAX_DECK);
    10000:   45:        handCount = floor(Random() * MAX_HAND);
    10000:   46:        discardCount = floor(Random() * MAX_DECK);
    10000:   47:        G.whoseTurn = player;
        -:   48:
        -:   49:        //sets the hand and deck values for the other players
    80098:   50:        for (i = 0; i < G.numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:   51:        {
    30049:   52:            G.deckCount[i] = deckCount;
    30049:   53:            G.handCount[i] = handCount;
    30049:   54:            G.discardCount[i] = discardCount;
    30049:   55:        }
        -:   56:
    10000:   57:        checkCouncilRoomEffect(player,&G);
    10000:   58:    }
        -:   59:
        -:   60:    //tallies up the fail counts
        1:   61:    int totalFails = cardEffectFails + discardCardFails + drawCardFails + deckHandCountFails + numBuysFails;
        -:   62:
        -:   63:    //prints the test results
        1:   64:    printf("\nRESULTS\n");
        1:   65:    printf("PASSED: %d\n",iterations - totalFails);
        1:   66:    printf("FAILED: %d\n",totalFails);
        -:   67:
        1:   68:    if (totalFails == 0)
branch  0 taken 100%
branch  1 taken 0%
        -:   69:    {
        1:   70:        printf ("RANDOM TEST PASSED\n\n");
        1:   71:    }
        -:   72:    else
        -:   73:    {
    #####:   74:        printf("\nRANDOM TEST FAILED\n");
    #####:   75:        printf("\nREPORT\n");
    #####:   76:        printf("drawCard() failed: %d\n",drawCardFails);
    #####:   77:        printf("cardEffect() failed: %d\n",cardEffectFails);
    #####:   78:        printf("discardCard() failed: %d\n",discardCardFails);
    #####:   79:        printf("numBuys Count mismatch: %d\n",numBuysFails);
    #####:   80:        printf("Other players hand/deck count mismatch: %d\n",otherPlayerDeckHandFails);
    #####:   81:        printf("Selected player hand/deck count mismatch: %d\n\n",deckHandCountFails);
        -:   82:    }
        -:   83:
        -:   84:    //coverage is displayed next as part of make rule
        1:   85:    printf ("COVERAGE\n");
        1:   86:    return 0;
        -:   87:}
        -:   88:
function checkCouncilRoomEffect called 10000 returned 100% blocks executed 65%
        -:   89:void checkCouncilRoomEffect(int p, struct gameState *post)
        -:   90:{
        -:   91:    int r,s,t,u,v,w,x,i;
    10000:   92:    int bonus = 0;
        -:   93:
        -:   94:    //gamestate variable to store previous state
        -:   95:    struct gameState pre;
        -:   96:
        -:   97:    //which is copied into a post state gamestate variable
    10000:   98:    memcpy(&pre,post,sizeof(struct gameState));
        -:   99:
        -:  100:    //calls the council room card effect function
    10000:  101:    r = cardEffect(council_room,0,0,0,post,0,&bonus);
        -:  102:
        -:  103:    //calls drawcard function 4 times
    10000:  104:    s = drawCard(p,&pre);
    10000:  105:    t = drawCard(p,&pre);
    10000:  106:    u = drawCard(p,&pre);
    10000:  107:    v = drawCard(p,&pre);
        -:  108:
    10000:  109:    pre.numBuys++;
        -:  110:
        -:  111:    //the other players each draw a card
    80098:  112:    for (i = 0; i < pre.numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  113:    {
    30049:  114:        if (i != p)
branch  0 taken 67%
branch  1 taken 33%
        -:  115:        {
    20049:  116:            w = drawCard(i,&pre);
        -:  117:
        -:  118:            //checks if the drawcard failed
    20049:  119:            if (w == -1 && pre.deckCount[i] != 0)
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        -:  120:            {
    #####:  121:                drawCardFails++;
    #####:  122:            }
    20049:  123:        }
    30049:  124:    }
        -:  125:
    10000:  126:    x = discardCard(0, p, &pre, 0);
        -:  127:
        -:  128:    //gets values for hand and deck counts
    10000:  129:    int postHC = post->handCount[p];
    10000:  130:    int postDC = post->deckCount[p];
    10000:  131:    int preHC = pre.handCount[p];
    10000:  132:    int preDC = pre.deckCount[p];
        -:  133:
        -:  134:    //checks if the number of buys match
    10000:  135:    if (pre.numBuys != post->numBuys)
branch  0 taken 0%
branch  1 taken 100%
        -:  136:    {
    #####:  137:        numBuysFails++;
    #####:  138:    }
        -:  139:
        -:  140:    //checks if draw card failed
    10000:  141:    if (s == -1 && pre.deckCount[p] != 0)
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        -:  142:    {
    #####:  143:        drawCardFails++;
    #####:  144:    }
        -:  145:
    10000:  146:    if (t == -1 && pre.deckCount[p] != 0)
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        -:  147:    {
    #####:  148:        drawCardFails++;
    #####:  149:    }
        -:  150:
    10001:  151:    if (u == -1 && pre.deckCount[p] != 0)
branch  0 taken 1%
branch  1 taken 99%
branch  2 taken 0%
branch  3 taken 100%
        -:  152:    {
    #####:  153:        drawCardFails++;
    #####:  154:    }
        -:  155:
    10001:  156:    if (v == -1 && pre.deckCount[p] != 0)
branch  0 taken 1%
branch  1 taken 99%
branch  2 taken 0%
branch  3 taken 100%
        -:  157:    {
    #####:  158:        drawCardFails++;
    #####:  159:    }
        -:  160:
        -:  161:    //checks if cardeffect or discardcard fails
    20000:  162:    if (!(r == 0 && x == 0))
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  163:    {
    #####:  164:        if (r)
branch  0 never executed
branch  1 never executed
        -:  165:        {
    #####:  166:            cardEffectFails++;
    #####:  167:        }
        -:  168:
    #####:  169:        if (x)
branch  0 never executed
branch  1 never executed
        -:  170:        {
    #####:  171:            discardCardFails++;
    #####:  172:        }
    #####:  173:    }
        -:  174:
        -:  175:    //checks if the hand and deck counts matchup or not
    20000:  176:    if (!(postHC == preHC && postDC == preDC))
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  177:    {
    #####:  178:        deckHandCountFails++;
    #####:  179:    }
        -:  180:
        -:  181:    //checks if the other players hand and deck counts matchup or not
    80098:  182:    for (i = 0; i < pre.numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  183:    {
    30049:  184:        if (i != p)
branch  0 taken 67%
branch  1 taken 33%
        -:  185:        {
    33385:  186:            if (!(post->handCount[i] == pre.handCount[i] && post->deckCount[i] == pre.deckCount[i]))
branch  0 taken 67%
branch  1 taken 33%
branch  2 taken 0%
branch  3 taken 100%
        -:  187:            {
     6713:  188:                otherPlayerDeckHandFails++;
     6713:  189:            }
    20049:  190:        }
    30049:  191:    }
    10000:  192:}
